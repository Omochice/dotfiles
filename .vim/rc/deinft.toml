hook_add = """
" Disable default plugins
let g:loaded_2html_plugin      = v:true
let g:loaded_logiPat           = v:true
let g:loaded_getscriptPlugin   = v:true
let g:loaded_gzip              = v:true
let g:loaded_gtags             = v:true
let g:loaded_gtags_cscope      = v:true
let g:loaded_man               = v:true
let g:loaded_matchit           = v:true
let g:loaded_matchparen        = v:true
let g:loaded_netrwFileHandlers = v:true
let g:loaded_netrwPlugin       = v:true
let g:loaded_netrwSettings     = v:true
let g:loaded_rrhelper          = v:true
let g:loaded_shada_plugin      = v:true
let g:loaded_spellfile_plugin  = v:true
let g:loaded_tarPlugin         = v:true
let g:loaded_tutor_mode_plugin = v:true
let g:loaded_vimballPlugin     = v:true
let g:loaded_zipPlugin         = v:true
"""

[ftplugin]
ruby = """
setlocal colorcolumn=100
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
"""

python = """
setlocal colorcolumn=88
setlocal tabstop=4
setlocal softtabstop=4
setlocal shiftwidth=4

iabbrev <buffer> improt import
"""

javascript = """
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
"""

yaml = """
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
setlocal spell
"""

vue = """
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
"""

typescript = """
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
"""

go = """
iabbrev <buffer> ;; :=
"""

htmldjango = """
setlocal filetype=html
"""

vim = """
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
"""

json = """
setlocal spell
"""

toml = """
setlocal spell
"""

plaintex = """
setlocal filetype=tex
"""

tex = """
setlocal wrap
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2

function! Subtest(...) range
    s/\s*$/ \\\\ \\hline/g
endfunction
command! -range SubTest <line1>,<line2>call Subtest(<q-args>)

function! LaTeXTable(...) range
  " Convert csv-like text to LaTeX's table.
  " replace comma to <space>&<space>
  '<,'>s/,/ \& /g
  " Replace end with \\ \hline
  '<,'>s/\s*$/ \\\\ \\hline/g
  let l:do_define = a:000 == ['']
  let l:n_columns = len(split(getline(a:firstline), '&'))
  let l:define_heads = [
     \ '\begin{table}[htbp]',
     \ "\t" . '\centering',
     \ "\t" . '\caption{}',
     \ ]
  let l:define_tails = [
     \ '\end{table}',
     \ ]
  let l:tabular_heads = [
     \ '\begin{tabular}{' . join(repeat(['l'], l:n_columns), '|') . '}',
     \ '\hline',
     \ ]
  let l:tabular_tails = [
     \'\end{tabular}',
     \ ]
  " If not specify argument, add \begin{table}
  if l:do_define
    call append(a:firstline - 1, l:define_heads + map(l:tabular_heads, '"\t" . v:val'))
    call append(a:lastline  + 5, map(l:tabular_tails, '"\t" . v:val') + l:define_tails)
  else
    call append(a:firstline - 1, l:tabular_heads)
    call append(a:lastline + 2,  l:tabular_tails)
  endif
endfunction
command! -nargs=? -range TexTable <line1>,<line2>call LaTeXTable(<q-args>)
"""

qf = """
setlocal wrap
"""

quickrun = """
setlocal wrap
"""

gitcommit = """
setlocal spell
"""

# from https://thinca.hatenablog.com/entry/20110903/1314982646
help = """
if &l:buftype !=# 'help'
  setlocal list spell tabstop=8 shiftwidth=8 softtabstop=8 textwidth=78
  if exists('+colorcolumn')
    setlocal colorcolumn=+1
  endif
  if has('conceal')
    setlocal conceallevel=0
  endif
endif
"""

elm = """
iabbrev <buffer> ;; ->
"""
