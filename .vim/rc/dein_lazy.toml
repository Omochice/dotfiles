[[plugins]]
repo = "kana/vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-line"
depends = "vim-textobj-user"
hook_add = """
xmap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
omap al <Plug>(textobj-line-a)
omap il <Plug>(textobj-line-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "rhysd/vim-textobj-anyblock"
depends = ["vim-textobj-user"]
hook_add = """
xmap ab <Plug>(textobj-anyblock-a)
xmap ib <Plug>(textobj-anyblock-i)
omap ab <Plug>(textobj-anyblock-a)
omap ib <Plug>(textobj-anyblock-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "thinca/vim-textobj-between"
depends = ["vim-textobj-user"]
hook_add = """
xmap af <Plug>(textobj-between-a)
xmap if <Plug>(textobj-between-i)
omap af <Plug>(textobj-between-a)
omap if <Plug>(textobj-between-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "kana/vim-textobj-indent"
depends = ["vim-textobj-user"]
hook_add = """
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
omap ai <Plug>(textobj-indent-a)
omap ii <Plug>(textobj-indent-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "easymotion/vim-easymotion"
hook_add = """
nmap f <Plug>(easymotion-tn)
nmap <Space>j <Plug>(easymotion-j)
nmap <Space>k <Plug>(easymotion-k)
nmap <Space>l <Plug>(easymotion-lineforward)
nmap <Space>h <Plug>(easymotion-linebackward)
let g:EasyMotion_smartcase = v:true
let g:EasyMotion_use_smartsign_jp = v:true
"""
on_map = { n = "<Plug>" }

[[plugins]]
repo = "hrsh7th/vim-vsnip"
on_map = { x = "<Plug>", i = "<Plug>" }
hook_add = """
let g:vsnip_snippet_dir = g:config_dir . '/snippets'
imap <expr><C-j> vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : '<Down>'
imap <expr><C-k> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<Up>'
xmap <expr><C-j> vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : '<Down>'
xmap <expr><C-k> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<Up>'
let g:vsnip_filetypes = {}
let g:vsnip_filetypes.plaintex = ["tex"]
"""
on_event = "InsertEnter"

[[plugins]]
repo = "cohama/lexima.vim"
hook_add = """
let g:lexima_map_escape = ''
let g:lexima_enable_endwise_rules = v:false
let g:lexima_enable_newline_rules = v:true
"""
hook_source = """
" too lang to write here
execute 'source ' . g:config_dir . '/mysettings/lexima.vim'
"""
on_event = "InsertEnter"

[[multiple_plugins]]
plugins = ["vim-vsnip", "lexima"]
hook_add = """
" imap <silent><expr> <Tab> vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : lexima#expand('<LT>Tab>', 'i')
" xmap <silent><expr> <Tab> vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : lexima#expand('<LT>Tab>', 'i')
"""

[[plugins]]
repo = "machakann/vim-sandwich"
# `h dein` says that You cannot use lazy <Plug> mappings twice.
# but it looks work for me.
hook_add = """
let g:operator_sandwich_no_default_key_mappings = v:true
nmap ys <Plug>(operator-sandwich-add)
nmap ds <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
nmap dsb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
nmap cs <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
nmap csb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
xmap S <Plug>(operator-sandwich-add)
"""
on_map = { n = "<Plug>(operator-sandwich-", x = "<Plug>(operator-sandwich-" }

[[plugins]]
repo = "Shougo/echodoc.vim"
on_event = "CompleteDone"
hook_source = """
let g:echodoc#type = has('nvim') ? 'floating' : 'popup'
highlight link EchoDocFloat Pmenu
call echodoc#enable()
"""

[[plugins]]
repo = "tyru/caw.vim"
hook_add = """
" Brute force solution
" https://github.com/tyru/caw.vim/issues/166
nmap gc <Plug>(caw:prefix)
vmap gc <Plug>(caw:prefix)
nmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
vmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
"""
depends = ["context_filetype.vim", "vim-repeat"]
on_map = { n = "<Plug>", v = "<Plug>" }

[[plugins]]
repo = "markonm/traces.vim"
on_event = "CmdlineEnter"

[[plugins]]
repo = "liuchengxu/vista.vim"
depends = ["vim-lsp"]
on_cmd = "Vista"
hook_add = """
let g:vista_default_executive = 'vim_lsp'
"""

[[plugins]]
repo = "simeji/winresizer"
hook_add = """
nnoremap <C-e> <Cmd>WinResizerStartResize<CR>
let g:winresizer_vert_resize = 3
"""
on_cmd = "WinResizerStartResize"

[[plugins]]
repo = "thinca/vim-quickrun"
hook_add = """
nmap <silent> <Space>q <Plug>(quickrun)
let g:quickrun_config = extend(get(g:, 'quickrun_config', {}), {
\   '_': {
\       'outputter/buffer/close_on_empty': v:true,
\       'hook/time/enable': 1,
\       'runner': has('nvim') ? 'neovim_job' : exists('*ch_close_in') ? 'job' : 'vimproc'
\   },
\   'typescript': {
\       'command': 'deno',
\       'cmdopt': '--allow-all --unstable',
\       'exec': 'NO_COLOR=1 %c run %o %s',
\   },
\ })
"""
depends = ["vimproc.vim", "vim-quickrun-neovim-job"]
on_map = { n = "<Plug>" }

[[plugins]]
repo = "lambdalisue/vim-quickrun-neovim-job"

[[plugins]]
repo = "Shougo/vimproc.vim"
build = "make"

[[plugins]]
repo = "ntpeters/vim-better-whitespace"
hook_add = """
let g:better_whitespace_enabled = v:true
let g:strip_whitespace_on_save = v:false
"""
on_event = "BufRead"

[[plugins]]
repo = "terryma/vim-expand-region"
hook_add = """
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
if has('nvim')
    let g:expand_region_text_objects = {
          \ 'iw'  :0,
          \ 'iW'  :0,
          \ 'i"'  :0,
          \ 'i''' :0,
          \ 'i]'  :1,
          \ 'ib'  :1,
          \ 'iB'  :0,
          \ 'il'  :1,
          \ 'ip'  :1,
          \ 'iL'  :1,
          \ 'aL'  :1,
          \ 'iF'  :1,
          \ 'aF'  :1,
          \ 'iC'  :1,
          \ 'aC'  :1,
          \ 'ie'  :0,
          \ }
else
    let g:expand_region_text_objects = {
          \ 'iw'  :0,
          \ 'iW'  :0,
          \ 'i"'  :0,
          \ 'i''' :0,
          \ 'i]'  :1,
          \ 'ib'  :1,
          \ 'iB'  :0,
          \ 'il'  :1,
          \ 'ip'  :1,
          \ 'ie'  :0,
          \ }
endif
"""
on_map = { v = "<Plug>" }
# if nvim, depends treesitter-textobjects.
depends = ["vim-textobj-user", "vim-textobj-line", "vim-textobj-anyblock"]

[[plugins]]
repo = "cespare/vim-toml"
on_ft = "toml"

[[plugins]]
repo = "ruby-formatter/rufo-vim"
hook_add = """
let g:rufo_auto_formatting = v:false
"""
on_cmd = "Rufo"
[plugins.ftplugin]
ruby = """
nnoremap <silent><buffer><Space>f <Cmd>Rufo<CR>
"""

[[plugins]]
repo = "z0mbix/vim-shfmt"
hook_add = """
let g:shfmt_extra_args = '-i 4 -ci -bn -s'
let g:shfmt_fmt_on_save = v:true
"""
on_ft = ["sh", "bash"]
on_event = "BufWritePre"

[[plugins]]
repo = "mattn/vim-goimports"
hook_add = """
let g:goimports = v:true
let g:goimports_simplify = v:true
"""
on_ft = "go"

[[plugins]]
repo = "alvan/vim-closetag"
hook_add = """
let g:closetag_filenames = '*.html, *,vue, *.xml, *.jsx, *.erb'
"""
on_ft = ["html", "vue", "xml", "erb", "jsx", "htmldjango"]

[[plugins]]
repo = "heavenshell/vim-pydocstring"
build = "make install"
hook_add = """
let g:pydocstring_formatter = 'google'
"""
on_cmd = ["Pydocstring", "PydocstringFormat"]
on_ft = "python"
[plugins.ftplugin]
ruby = """
nnoremap <silent><Space>pd <Cmd>PydocstringFormat<CR>
"""

[[plugins]]
repo = "fs111/pydoc.vim"
hook_add = """
let g:pydoc_perform_mappings = v:false
"""
on_ft = "python"

# [[plugins]]
# repo = "jmcantrell/vim-virtualenv"
# on_ft = "python"

# [[plugins]]
# repo = "PieterjanMontens/vim-pipenv"
# on_ft = "python"

[[plugins]]
repo = "mattn/vim-maketable"
on_ft = "markdown"
on_cmd = "MakeTable"

[[plugins]]
repo = "previm/previm"
on_cmd = "PrevimOpen"
# on_ft = "markdown" # if enable this, occur bug
hook_add = """
let g:previm_open_cmd = '$BROWSER'
"""

[[plugins]]
repo = "posva/vim-vue"
on_ft = "vue"

[[plugins]]
repo = "dag/vim-fish"
on_ft = "fish"

[[plugins]]
repo = "ap/vim-css-color"
on_ft = ["css", "scss"]

[[plugins]]
repo = "pechorin/any-jump.vim"
hook_add = """
let g:any_jump_disable_default_keybindings = v:true
nnoremap <silent><C-f> <Cmd>AnyJump<CR>
"""
on_cmd = ["AnyJump", "AnyJunpVisual", "AnyJumpBack", "AnyJumpLastResults"]

[[plugins]]
repo = "y0za/vim-reading-vimrc"
on_cmd = [
    "ReadingVimrcNext",
    "ReadingVimrcList",
    "ReadingVimrcLoad",
    "ReadingVimrcCopy",
]
hook_add = """
function! s:reading_copy(line1, line2) abort range
  let file = expand('%:t')
  if a:line1 == a:line2
    let line = printf('L%d', a:line1)
  else
    let line = printf('L%d+%d', a:line1, a:line2 - a:line1)
  endif
  let @+ = input('', printf('%s#%s ', file, line))
endfunction

command! -range ReadingVimrcCopy call <SID>reading_copy(<line1>, <line2>)
"""

[[plugins]]
repo = "lambdalisue/suda.vim"
hook_add = """
let g:suda_smart_edit = v:true
"""
on_event = "BufRead"

[[plugins]]
repo = "Shougo/context_filetype.vim"
hook_source = """
let g:context_filetype#ignore_patterns = {
\   'toml': ['^\s*#\s*'],
\}
"""

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
if = "has('nvim')"
on_event = "BufRead"
hook_post_update = "TSUpdate"
hook_source = """
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
    },
}
EOF
"""

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter-textobjects"
on_source = "nvim-treesitter"
depends = ["nvim-treesitter"]
hook_source = """
lua <<EOF
require'nvim-treesitter.configs'.setup{
    textobjects = {
        select = {
            enable = true,
            lookahead = true,
            keymaps = {
                ["aF"] = "@function.outer",
                ["iF"] = "@function.inner",
                ["aC"] = "@class.outer",
                ["iC"] = "@class.inner",
                ["iL"] = "@loop.inner",
                ["aL"] = "@loop.outer",
            },
        },
    },
}
EOF
"""

[[plugins]]
# FIXME
# this is not work. conflict with clipboard?
repo = "yuki-yano/vim-operator-replace"
depends = "vim-operator-user"
on_map = { n = "<Plug>", x = "<Plug>" }
hook_add = """
map R <Plug>(operator-replace)
"""

[[plugins]]
repo = "mattn/vim-treesitter"
build = "cd server && go build"
if = "!has('nvim')"

[[plugins]]
repo = "christoomey/vim-tmux-navigator"
hook_add = """
let g:tmux_navigator_no_mappings = v:true
" noremap
noremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
noremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
noremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
noremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
" lnoremap
lnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
lnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
lnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
lnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
" tnoremap
tnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
tnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
tnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
tnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
"""
on_cmd = [
    "TmuxNavigateLeft",
    "TmuxNavigateDown",
    "TmuxNavigateUp",
    "TmuxNavigateRight",
]

[[plugins]]
repo = "machakann/vim-vimhelplint"
on_ft = "help"
[plugins.ftplugin]
help = """
nnoremap <silent><buffer><Space>d <Cmd>VimhelpLint!<CR>
"""

[[plugins]]
repo = "mattn/vim-sonictemplate"
on_cmd = "Template"
hook_add = """
let g:sonictemplate_vim_template_dir = g:config_dir . '/templates'
"""

[[plugins]]
repo = "junegunn/fzf"
build = "./install --all"
# merged = 0

[[plugins]]
repo = "yuki-yano/fzf-preview.vim"
rev = "release/rpc"
hook_add = """
nmap <C-p> [fzf-p]
nnoremap [fzf-p]<C-p> <Cmd>FzfPreviewDirectoryFilesRpc<CR>
nnoremap [fzf-p]c     <Cmd>FzfPreviewCommandPaletteRpc<CR>
nnoremap [fzf-p]g     :<C-u>FzfPreviewProjectGrepRpc<Space>
let g:fzf_preview_fzf_preview_window_option = 'right:50%'
let g:fzf_preview_use_dev_icons = v:true
let g:fzf_preview_dev_icon_prefix_string_length = 3
let g:fzf_preview_dev_icons_limit = 5000
"""
# on first execution, it say "The server is not ready yet."
# for running it fine. I set denops as dependency.
depends = ["vim-devicons", "fzf", "denops.vim"]
on_cmd = [
    "FzfPreviewCommandPaletteRpc",
    "FzfPreviewDirectoryFilesRpc",
    "FzfPreviewProjectGrepRpc",
]
