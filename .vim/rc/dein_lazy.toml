# [[plugins]]
# repo = "Shougo/ddc.vim"
# hook_source = """
# call ddc#custom#patch_global(
#   \ 'sources', ['ddc-vim-lsp', 'buffer', 'around']
#   \ )
# call ddc#custom#patch_global('sourceOptions', {
#   \ '_': {
#   \   'matchers': ['matcher_editdistance'],
#   \   'sorters': ['sorter_rank'],
#   \ },
#   \ 'ddc-vim-lsp': {'mark': 'LSP'},
#   \ 'buffer': {'mark': 'Buffer'},
#   \ 'around': {"mark": "Around"},
#   \ 'necovim': {"mark": "Neco"},
#   \ })
# call ddc#enable()
# inoremap <silent><expr> <C-Space> pumvisible() ? "\<C-Space>" : ddc#manual_complete()
# """
# depends = ["denops.vim", "context_filetype.vim"]
# on_event = "InsertEnter"
# 
# [[plugins]]
# repo = "shun/ddc-vim-lsp"
# depends = ["ddc.vim", "vim-lsp"]
# on_source = "ddc.vim"
# 
# [[plugins]]
# repo = "Shougo/ddc-around"
# depends = ["ddc.vim"]
# on_source = "ddc.vim"
# 
# [[plugins]]
# repo = "Shougo/ddc-matcher_head"
# depends = ["ddc.vim"]
# on_source = "ddc.vim"
# 
# [[plugins]]
# repo = 'Shougo/ddc-sorter_rank'
# depends = ["ddc.vim"]
# on_source = "ddc.vim"
# 
# [[plugins]]
# repo = "Shougo/neco-vim"
# depends = ["ddc.vim"]
# on_source = "ddc.vim"
# 
# [[plugins]]
# repo = 'matsui54/ddc-buffer'
# depends = ["ddc.vim"]
# on_source = "ddc.vim"
# 
# [[plugins]]
# repo = 'matsui54/ddc-filter_editdistance'
# on_souce = "ddc.vim"

[[plugins]]
repo = "prabirshrestha/asyncomplete.vim"
hook_add = """
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
imap <C-Space> <Plug>(asyncomplete_force_refresh)
let g:asyncomplete_auto_completeopt = v:true
let g:asyncomplete_matchfuzzy = v:true
let g:asyncomplete_auto_popup = v:true
let g:asyncomplete_auto_completeopt = v:false
"""
on_event = "InsertEnter"

[[plugins]]
repo = "prabirshrestha/asyncomplete-buffer.vim"
hook_source = """
call asyncomplete#register_source(
\    asyncomplete#sources#buffer#get_source_options({
\       "name": "Buffer",
\       "allowlist": ["*"],
\       "completor": function("asyncomplete#sources#buffer#completor"),
\       "config": {
\           "max_buffer_size": 5000000,
\       },
\   })
\)
"""
on_source = "asyncomplete.vim"

[[plugins]]
repo = "prabirshrestha/asyncomplete-lsp.vim"
depends = ["asyncomplete.vim", "vim-lsp"]
on_source = "asyncomplete.vim"

[[plugins]]
repo = "cohama/lexima.vim"
hook_source = """
" too lang to write here
source ~/.vim/mysettings/lexima.vim
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" FIXME
" if use double quote like "<LT>CR>",
" it show like piece like =lexima#insmode#_map_impl("<CR>")`
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : lexima#expand('<LT>Tab>', "i")
"""
marged = 0
on_event = "InsertEnter"

[[plugins]]
repo = "machakann/vim-sandwich"
hook_source = """
" use with surround's keybinding.
" may be useful vim and vscode(surround with vscodevim).
" ^ really?
execute("source " . g:dein_dir . "/repos/github.com/machakann/vim-sandwich/macros/sandwich/keymap/surround.vim")
"""
on_event = "VimEnter"

[[plugins]]
repo = "cespare/vim-toml"
on_ft = "toml"

[[plugins]]
repo = "ruby-formatter/rufo-vim"
hook_add = """
let g:rufo_auto_formatting = v:true
"""
on_ft = "ruby"

[[plugins]]
repo = "z0mbix/vim-shfmt"
hook_add = """
let g:shfmt_extra_args = "-i 4 -ci -bn -s"
let g:shfmt_fmt_on_save = v:true
"""
on_ft = ["sh", "bash"]

[[plugins]]
repo = "mattn/vim-goimports"
hook_add = """
let g:goimports = v:true
let g:goimports_simplify = v:true
"""
on_ft = "go"

[[plugins]]
repo = "alvan/vim-closetag"
hook_add = """
let g:closetag_filenames = "*.html, *,vue, *.xml, *.jsx, *.erb"
"""
on_ft = ["html", "vue", "xml", "erb", "jsx", "htmldjango"]

[[plugins]]
repo = "heavenshell/vim-pydocstring"
build = "make install"
hook_add = """
let g:pydocstring_formatter = "google"
nnoremap <silent> <Space>pd <Cmd>PydocstringFormat<CR>
"""
on_cmd = ["Pydocstring", "PydocstringFormat"]
on_ft = "python"

[[plugins]]
repo = "fs111/pydoc.vim"
hook_add = """
let g:pydoc_perform_mappings = v:true
"""
on_ft = "python"

# [[plugins]]
# repo = "jmcantrell/vim-virtualenv"
# on_ft = "python"

# [[plugins]]
# repo = "PieterjanMontens/vim-pipenv"
# on_ft = "python"

[[plugins]]
repo = "mattn/vim-maketable"
on_ft = "markdown"
on_cmd = "MakeTable"

[[plugins]]
repo = "previm/previm"
on_cmd = "PrevimOpen"
on_ft = "markdown"
hook_add = """
let g:previm_open_cmd = "vivaldi-stable"
"""

[[plugins]]
repo = "posva/vim-vue"
on_ft = "vue"

[[plugins]]
repo = "dag/vim-fish"
on_ft = "fish"

[[plugins]]
repo = "ap/vim-css-color"
on_ft = ["css", "scss"]

[[plugins]]
repo = "pechorin/any-jump.vim"
hook_add = """
let g:any_jump_disable_default_keybindings = v:true
nnoremap <silent><C-f> <Cmd>AnyJump<CR>
"""
on_cmd = ["AnyJump", "AnyJunpVisual", "AnyJumpBack", "AnyJumpLastResults"]

[[plugins]]
repo = "y0za/vim-reading-vimrc"
on_cmd = ["ReadingVimrcNext", "ReadingVimrcList", "ReadingVimrcLoad", "ReadingVimrcCopy"]
hook_add = """
function! s:reading_copy(line1, line2) abort range
  let file = expand("%:t")
  if a:line1== a:line2
    let line = printf('L%d', a:line1)
  else
    let line = printf('L%d+%d', a:line1, a:line2 - a:line1)
  endif
  let @+ = input('', printf('%s#%s ', file, line))
endfunction

command! -range ReadingVimrcCopy call <SID>reading_copy(<line1>, <line2>)
"""
