[[plugins]]
repo = "vim-denops/denops.vim"
hook_add = """
command! DenopsRestart call denops#server#restart() " NOTE: not work?
"""

# {{{ ddc
[[plugins]]
repo = "Shougo/ddc.vim"
hook_add = """
let g:ddc_use_pum = v:true
let g:ddc_source_options = #{
      \ _: #{
      \   matchers: ['matcher_fuzzy'],
      \   sorters: ['sorter_fuzzy'],
      \   converters: ['converter_remove_overlap', 'converter_fuzzy'],
      \   minAutoCompleteLength: 2,
      \   ignoreCase: v:true,
      \   },
      \ }
let g:ddc_sources = #{
      \ snippet: ['vsnip'],
      \ lsp: ['vim-lsp'],
      \ in-vim: ['around', 'buffer'],
      \ out-vim: ['rg'],
      \ }
" if has('wsl')
"   let g:ddc_sources['out-vim'] += ['tmux']
" endif

inoremap <silent><expr> <C-Space> ddc#map#manual_complete()
inoremap <silent><expr> <C-x> ddc#map#manual_complete(["vim-lsp"])

if dein#tap('vim-vsnip-integ')
  let g:ddc_source_options['vsnip'] = {'mark': '[Snp]'}
endif
"""
hook_source = """
call ddc#custom#patch_global(
      \ 'sources', g:ddc_sources['snippet'] + g:ddc_sources['lsp'] + g:ddc_sources['in-vim'] + g:ddc_sources['out-vim'],
      \ )
call ddc#custom#patch_global('sourceOptions', g:ddc_source_options,)
" Drop lsp source on vim/toml, because it provide a:a:content.
call ddc#custom#patch_filetype(
      \ ['toml', 'vim'], 'sources', g:ddc_sources['snippet'] + ['necovim'] + g:ddc_sources['in-vim'] + g:ddc_sources['out-vim'],
      \ )
" NOTE: volar is too slow to show with other sources.
call ddc#custom#patch_filetype(
      \ 'vue', 'sources', g:ddc_sources['snippet'] + g:ddc_sources['in-vim'] + g:ddc_sources['out-vim'],
      \ )
call ddc#custom#patch_filetype(
      \ ['markdown'], 'sources', g:ddc_sources['snippet'] + ['file'] + g:ddc_sources['in-vim'] + g:ddc_sources['out-vim'],
      \ )

if g:ddc_use_pum
  call ddc#custom#patch_global('ui', 'pum')
  " call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('backspaceCompletion', v:true)
endif
call ddc#enable()
"""
depends = ["denops.vim", "pum.vim"]
on_event = "InsertEnter"

[[plugins]]
repo = "Shougo/pum.vim"
hook_add = """
inoremap <expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
inoremap <expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
"""

[[plugins]]
repo = "Shougo/ddc-ui-pum"
on_source = "ddc.vim"
depends = ["pum.vim"]

# [[multiple_plugins]]
# plugins = ["pum.vim", "lexima.vim"]
# hook_source in multiple_plugins is not provided
# hook_source =

[[plugins]]
repo = "shun/ddc-vim-lsp"
hook_source = """
let g:ddc_source_options['vim-lsp'] = #{
      \   mark: '[LSP]',
      \   isVolatile: v:true,
      \   forceCompletionPattern: '\..?|:|->|\w+/',
      \ }
"""
depends = ["vim-lsp"]
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-around"
hook_source = """
let g:ddc_source_options['around'] = #{mark: '[Ard]'}
"""
on_source = "ddc.vim"

# [[plugins]]
# repo = "Shougo/ddc-matcher_head"
# on_source = "ddc.vim"

# [[plugins]]
# repo = "Shougo/ddc-sorter_rank"
# on_source = "ddc.vim"

# [[plugins]]
# repo = 'Shougo/ddc-cmdline-history'
# hook_source = """
# let g:ddc_source_options['cmdline-history'] = {
# \   'mark': 'Hst',
# \   'maxItems': 100,
# \   'minAutoCompleteLength': 5,
# \ }
# """
# on_source = 'ddc.vim'

[[plugins]]
repo = "Shougo/neco-vim"
hook_source = """
let g:ddc_source_options['necovim'] = #{mark: '[Nec]'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/ddc-buffer"
hook_source = """
let g:ddc_source_options['buffer'] = #{mark: '[Buf]'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-converter_remove_overlap"
on_source = "ddc.vim"

[[plugins]]
repo = "delphinus/ddc-tmux"
hook_source = """
let g:ddc_source_options['tmux'] = #{mark: '[Tmx]'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "tani/ddc-fuzzy"
on_source = "ddc.vim"

[[plugins]]
repo = "LumaKernel/ddc-file"
hook_source = """
let g:ddc_source_options['file'] = #{
      \   mark: '[Fil]',
      \   isVolatile: v:true,
      \   forceCompletionPattern: '\S/\S*',
      \ }
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-rg"
hook_source = """
let g:ddc_source_options['rg'] = #{
      \   mark: '[Rg]',
      \   minAutoCompleteLength: 4,
      \   maxItems: 20,
      \ }
"""
on_source = "ddc.vim"

# [[plugins]]
# repo = "matsui54/denops-popup-preview.vim"
# hook_source = """
# call popup_preview#enable()
# """
# on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/denops-signature_help"
hook_add = """
let g:signature_help_config = #{
      \   style: 'labelOnly',
      \ }
"""
hook_source = """
call signature_help#enable()
"""
on_source = "ddc.vim"

# }}}
#
# [[plugins]]
# repo = "Omochice/dps-popup-test"
# # repo = "~/workspace/dps-popup-test"
# on_source = "denops.vim"
#
[[plugins]]
repo = "Omochice/dps-paiza-io-vim"
# repo = "~/workspace/dps-paiza-io-vim"
on_cmd = "PaizaIO"

# [[plugins]]
# repo = "Omochice/dps-charcounter-vim"
# # repo = "~/workspace/dps-charcounter-vim"
# on_cmd = "CharCount"

[[plugins]]
repo = "Omochice/dps-codic-vim"
# repo = "~/workspace/dps-codic-vim"
on_cmd = "Codic"

# [[plugins]]
# repo = "yuki-yano/dps-slack-status.vim"
# hook_add = """
# let g:slack_status_emoji = ":dadparrot:"
# """
# on_source = "denops.vim"

# # guise.vim not work well on lazy...?
[[plugins]]
repo = "lambdalisue/guise.vim"
on_event = "TermOpen"
depends = "denops.vim"
# # # on_source = "denops.vim"

# # [[plugins]]
# # repo = "supporterz-vol5-1/breakTimer-vim"
# # hook_add = """
# # let g:break_timer_username = "Omochice"
# # """
# # depends = ["denops.vim"]
# # on_event = "BufRead"
#
[[plugins]]
repo = "gamoutatsumi/dps-ghosttext.vim"
hook_add = """
let g:dps_ghosttext#ftmap = {
\   'biz.quest.signate.jp': 'python',
\   'play.golang.org': 'go',
\   'cloudlatex.io': 'tex',
\   'redmine': 'markdown',
\ }
"""
depends = "denops.vim"
on_cmd = "GhostStart"

# ddu.vim {{{
[[plugins]]
repo = "Shougo/ddu-commands.vim"
depends = "ddu.vim"
on_cmd = ["Ddu"]

# TODO: ddu関連windowをまとめて閉じれるようにする
# TODO: previewをいい感じにする
[[plugins]]
repo = "Shougo/ddu.vim"
depends = "denops.vim"
hook_add = """
let g:ddu_window_width_percent = 0.45
let g:ddu_window_height_percent = 0.9
nmap <C-k> <Plug>(ddu-prefix)
nmap <Plug>(ddu-prefix)<C-k> <Cmd>call ddu#start({})<CR>
" nmap <silent><Plug>(ddu-prefix)<C-g> <Cmd>call <SID>ddu_grep_wrapper()<CR>
nmap <Plug>(ddu-prefix)<C-w> <Cmd>call ddu#start({'sources': [{'name': 'mru'}]})<CR>
nmap <Plug>(ddu-prefix)<C-b> <Cmd>call ddu#start({'sources': [{'name': 'buffer'}]})<CR>
function! s:ddu_grep_wrapper(query) abort
  if !empty(a:query)
    call ddu#start(#{sources: [#{name: 'rg', params: #{input: a:query}}], sourceOptions: #{rg: #{ matchers: ['converter_display_word', 'matcher_fzf'] }}})
  endif
endfunction

command! -nargs=1 DduGrep call <SID>ddu_grep_wrapper(<q-args>)
nmap <Plug>(ddu-prefix)<C-g> :<C-u>DduGrep<Space>
nmap <Plug>(ddu-prefix)<C-l> <Cmd>call ddu#start(#{
    \ sources: [#{name: 'rg', options: #{matcher: []}}],
    \ uiParams: #{
    \   ff: #{ ignoreEmpty: v:false,}
    \ },
    \ volatile: v:true,
    \ })<CR>
nmap <Plug>(ddu-prefix)g <Cmd>call <SID>ddu_grep_wrapper(expand('<cword>'))<CR>
"""
hook_source = """
let s:config = #{
\ ui: 'ff',
\ sources: [#{name: 'file_rec', params: #{ ignoredDirectories: ['.git', 'node_modules', 'dein'] },}],
\ sourceOptions: #{
\   _: #{
\     ignoreCase: v:true,
\     matchers: ['matcher_fzf'],
\   },
\ },
\ sourceParams: #{
\   rg: #{
\     rg: #{
\       matchers: ['converter_display_word', 'matcher_substring'],
\     },
\     args  : ["--json", "--ignore-case"],
\   },
\   mru: #{
\     mr: #{
\       kind: 'mru',
\       current: v:true,
\     },
\   },
\ },
\ filterParams: #{
\   matcher_fzf: #{
\     highlightMatched: 'Search',
\   },
\   matcher_substring: #{
\     highlightMatched: 'Search',
\   },
\ },
\ kindOptions: #{
\   file: #{
\     defaultAction: 'open',
\   },
\ },
\ uiParams: #{
\   ff: #{
\     ignoreEmpty: v:true,
\     split: 'floating',
\     filterSplitDirection: 'floating',
\     filterFloatingPosition: 'top',
\     prompt: '>',
\     previewFloating: v:true,
\     previewVertical: v:true,
\     startFilter: v:true,
\     floatingBorder: ['┌', '─', '┐', '│', '┘', '─', '└', '│'],
\     previewFloatingBorder: ['┌', '─', '┐', '│', '┘', '─', '└', '│'],
\     previewFloatingZindex: 100,
      autoAction: #{ name: 'preview' },
\   },
\ },
\ }
function! s:set_size() abort
  " this from kuuote/dotvim
  let s:config.uiParams.ff.winWidth = float2nr(&columns * g:ddu_window_width_percent*2)
  let s:config.uiParams.ff.winHeight = float2nr(&lines * g:ddu_window_height_percent)
  let s:config.uiParams.ff.winCol = float2nr((1 - g:ddu_window_width_percent * 2)/2 * &columns)
  let s:config.uiParams.ff.winRow = float2nr((1 - g:ddu_window_height_percent)/2 * &lines) + 1
  let s:config.uiParams.ff.previewWidth = float2nr(&columns * g:ddu_window_width_percent)
  let s:config.uiParams.ff.previewHeight = float2nr(&lines * g:ddu_window_height_percent)
endfunction

function! s:reset_size() abort
  call s:set_size()
  call ddu#custom#patch_global(s:config)
endfunction

call s:reset_size()
augroup ddu-reset-size
  autocmd!
  autocmd VimResized * call s:reset()
augroup END
"""
# \     'autoAction': { 'name': 'preview' },

[[plugins]]
repo = "Shougo/ddu-ui-ff"
hook_add = """
function s:close_previews()
    echomsg 'hey'
  call ddu#ui#ff#execute('call ddu#ui#ff#close()')
  for l:bufnr in tabpagebuflist()
    if bufname(l:bufnr) =~# '^ddu-ff:'
      execute 'bwipeout' l:bufnr
    endif
  endfor
endfunction

augroup autocCloseDdu
  autocmd!
  " autocmd BufWinLeave ddu-ff-filter-default call ddu#ui#ff#execute('call ddu#ui#ff#close()')
  " autocmd BufWinLeave duu-ff-default call <SID>close_previews()
  autocmd BufWinLeave ddu-ff-filter-default call <SID>close_previews()
augroup END
"""
on_source = "ddu.vim"
[plugins.ftplugin]
ddu-ff = """
nnoremap <buffer><silent> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
nnoremap <buffer><nowait><silent> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
nnoremap <buffer><nowait><silent> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
nnoremap <buffer><nowait><silent> p <Cmd>call ddu#ui#ff#do_action('preview')<CR>
nnoremap <buffer> <C-w><C-w> <C-w><C-w>
"""
ddu-ff-filter = """
inoremap <buffer><nowait> <C-o> <Cmd>call ddu#ui#ff#execute('call ddu#ui#ff#do_action("preview")')<CR>
inoremap <buffer> <CR> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "edit" }, }
\)')<CR>
" NOTE: gt is needed
inoremap <buffer> <C-t> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "tabedit" }, }
\)')<CR>gt
inoremap <buffer> <C-v> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "vsplit" }, }
\)')<CR>
inoremap <buffer> <C-s> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "split" }, }
\)')<CR>
nnoremap <buffer> <CR> <Cmd>call ddu#ui#ff#close()<CR>
nnoremap <buffer><nowait> q <Cmd>call ddu#ui#ff#close()<CR>
inoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)<Bar>redraw')<CR>
inoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-w><C-w> <C-w><C-w>
"""

[[plugins]]
repo = "Shougo/ddu-source-file_rec"
on_source = "ddu.vim"

[[plugins]]
repo = "shun/ddu-source-rg"
on_source = "ddu.vim"

[[plugins]]
repo = "kuuote/ddu-source-mr"
on_source = "ddu.vim"

[[plugins]]
repo = "shun/ddu-source-buffer"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-converter_display_word"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-matcher_substring"
on_source = "ddu.vim"

[[plugins]]
repo = "yuki-yano/ddu-filter-fzf"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-kind-file"
on_source = "ddu.vim"

# }}}

[[plugins]]
repo = "lambdalisue/gin.vim"
depends = "denops.vim"
hook_add = """
cnoreabbrev gin Gin
cnoreabbrev gins GinStatus
cnoreabbrev ginb GinBranch
"""
on_cmd = ["Gin", "GinStatus"]
[plugins.ftplugin]
gin-status = """
nnoremap <buffer><nowait> q <Cmd>bprevious<CR>
nnoremap <buffer> cc <Cmd>Gin commit<CR>
"""

[[plugins]]
repo = "Omochice/tataku.vim"
hook_add = """
let g:tataku_recipes = #{
      \ translate_en_to_ja: #{
      \   collector: #{name: 'current_line', options: {}},
      \   processor: [
      \     #{name: 'intl_segmenter', options: #{locale: 'en'}},
      \     #{name: 'google_translate', options: #{source: "en", target: 'ja'}},
      \     #{name: 'intl_segmenter', options: #{locale: 'ja'}},
      \   ],
      \   emitter: #{name: 'nvim_floatwin', options: #{border: 'single'}}
      \ },
      \ translate_ja_to_en: #{
      \   collector: #{name: 'current_line', options: {}},
      \   processor: [
      \     #{name: 'intl_segmenter', options: #{locale: 'ja'}},
      \     #{name: 'google_translate', options: #{source: "ja", target: 'en'}},
      \     #{name: 'intl_segmenter', options: #{locale: 'en'}},
      \   ],
      \   emitter: #{name: 'nvim_floatwin', options: #{border: 'single'}}
      \ },
      \ }
let g:tataku_enable_operator = v:true
nmap tr <Plug>(operator-tataku-translate_en_to_ja)
xmap tr <Plug>(operator-tataku-translate_en_to_ja)
nmap tR <Plug>(operator-tataku-translate_ja_to_en)
xmap tR <Plug>(operator-tataku-translate_ja_to_en)
nmap trr <Cmd>call tataku#call_recipe('translate_en_to_ja')<CR>
nmap tRR <Cmd>call tataku#call_recipe('translate_ja_to_en')<CR>
"""
depends = ["denops.vim", "vim-operator-user"]
on_func = "tataku#call_recipe"
on_map = { n = "<Plug>(operator-tataku", x = "<Plug>(operator-tataku" }

[[plugins]]
repo = "Omochice/tataku-collector-current_line"
on_source = "tataku.vim"

[[plugins]]
repo = "Omochice/tataku-processor-google_translate"
on_source = "tataku.vim"

[[plugins]]
repo = "Omochice/tataku-processor-intl_segmenter"
on_source = "tataku.vim"

[[plugins]]
repo = "Omochice/tataku-emitter-nvim_floatwin"
on_source = "tataku.vim"

[[plugins]]
repo = "4513ECHO/denops-gitter.vim"
hook_add = """
let g:gitter#token = $GITTER_TOKEN
command! ReadingVimrcGitter tabnew gitter://room/vim-jp/reading-vimrc
"""
depends = ["denops.vim"]
on_path = "gitter://*"
