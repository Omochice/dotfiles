[[plugins]]
repo = "vim-denops/denops.vim"
hook_add = """
command! DenopsRestart call denops#server#restart() " NOTE: not work?
"""

# {{{ ddc
[[plugins]]
repo = "Shougo/ddc.vim"
hook_add = """
let g:ddc_use_pum = v:true
let g:ddc_use_cmdline = v:false
let g:ddc_source_options = {
\ '_': {
\   'matchers': ['matcher_fuzzy'],
\   'sorters': ['sorter_fuzzy'],
\   'converters': ['converter_remove_overlap', 'converter_fuzzy'],
\   'minAutoCompleteLength': 2,
\   'ignoreCase': v:true,
\   }
\ }

inoremap <silent><expr> <C-Space> ddc#manual_complete()

if dein#tap('vim-vsnip-integ')
  let g:ddc_source_options['vsnip'] = {'mark': 'Snp'}
endif

if g:ddc_use_cmdline
  nnoremap : <Cmd>call CommandlinePre()<CR>:
  function! CommandlinePre() abort
    call dein#source('ddc.vim')
    cnoremap <expr> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ ddc#manual_complete()
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y> <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e> <Cmd>call pum#map#cancel()<CR>
    cnoremap <expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
    cnoremap <expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources',
            \ ['necovim', 'cmdline-history', 'around', 'file'])
    call ddc#custom#patch_buffer('sourceOptions', {
            \ 'necovim': {
                \ 'maxItems': 15},
            \ 'around': {
                \ 'maxItems': 5},
            \ 'file': {
                \ 'maxItems': 5},
            \ })
    augroup ddc_cmdline_internal
      autocmd!
      autocmd CmdlineLeave * ++once call CommandlinePost()
    augroup END
    " Enable command line completion
    call ddc#enable_cmdline_completion()
    call ddc#enable()
  endfunction
  function! CommandlinePost() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
    cunmap <Tab>
  endfunction
endif
"""
hook_source = """
let g:ddc_base_sources = ['vsnip', 'vim-lsp', 'around', 'rg', 'buffer']
call ddc#custom#patch_global(
 \ 'sources', g:ddc_base_sources,
 \ )
call ddc#custom#patch_global('sourceOptions', g:ddc_source_options,)
" on vim/toml drop lsp. bacause it compete duplicates like a:a:contents often
call ddc#custom#patch_filetype(
  \ ['toml', 'vim'], 'sources', g:ddc_base_sources[0:0] + ['necovim'] + g:ddc_base_sources[2:-1],
  \ )
call ddc#custom#patch_filetype(
  \ ['markdown'], 'sources', g:ddc_base_sources[0:1] + ['file'] + g:ddc_base_sources[2:-1],
  \ )

if g:ddc_use_pum
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('backspaceCompletion', v:true)
endif
call ddc#enable()
"""
depends = ["denops.vim", "context_filetype.vim", "pum.vim"]
on_event = "InsertEnter"

[[plugins]]
repo = "Shougo/pum.vim"
hook_add = """
inoremap <expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
inoremap <expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
"""
# hook_source = """
# " Sourcing lexima provide some `lexima#expand() to mapping`
# " So, below is wrote into hook_source
# " imap <silent><expr> <CR> pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : lexima#expand('<LT>CR>', 'i')
# """

# [[multiple_plugins]]
# plugins = ["pum.vim", "lexima.vim"]
# hook_source in multiple_plugins is not provided
# hook_source =

[[plugins]]
repo = "shun/ddc-vim-lsp"
hook_source = """
let g:ddc_source_options['vim-lsp'] = {
\   'mark': 'LSP',
\   'isVolatile': v:true,
\   'forceCompletionPattern': '\..?|:|->|\w+/',
\ }
"""
depends = ["vim-lsp"]
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-around"
hook_source = """
let g:ddc_source_options['around'] = {'mark': 'Ard'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-matcher_head"
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-sorter_rank"
on_source = "ddc.vim"

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
hook_source = """
let g:ddc_source_options['cmdline-history'] = {
\   'mark': 'Hst',
\   'maxItems': 100,
\   'minAutoCompleteLength': 5,
\ }
"""
on_source = 'ddc.vim'

[[plugins]]
repo = "Shougo/neco-vim"
hook_source = """
let g:ddc_source_options['necovim'] = {'mark': 'Nec'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/ddc-buffer"
hook_source = """
let g:ddc_source_options['buffer'] = {'mark': 'Buf'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-converter_remove_overlap"
on_source = "ddc.vim"

[[plugins]]
repo = "delphinus/ddc-tmux"
hook_source = """
let g:ddc_source_options['tmux'] = {'mark': 'Tmx'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "tani/ddc-fuzzy"
on_source = "ddc.vim"

[[plugins]]
repo = "LumaKernel/ddc-file"
hook_source = """
let g:ddc_source_options['file'] = {
\   'mark': 'Fil',
\   'isVolatile': v:true,
\   'forceCompletionPattern': '\S/\S*',
\ }
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-rg"
hook_source = """
let g:ddc_source_options['rg'] = {
\   'mark': 'Rg',
\   'minAutoCompleteLength': 4,
\   'maxItems': 20,
\ }
"""
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/denops-popup-preview.vim"
hook_source = """
call popup_preview#enable()
"""
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/denops-signature_help"
hook_add = """
let g:signature_help_config = {
\   'style': 'labelOnly',
\ }
"""
hook_source = """
call signature_help#enable()
"""
on_source = "ddc.vim"

# }}}
#
# [[plugins]]
# repo = "Omochice/dps-popup-test"
# # repo = "~/workspace/dps-popup-test"
# on_source = "denops.vim"
#
[[plugins]]
repo = "Omochice/dps-paiza-io-vim"
# repo = "~/workspace/dps-paiza-io-vim"
on_cmd = "PaizaIO"

# [[plugins]]
# repo = "Omochice/dps-charcounter-vim"
# # repo = "~/workspace/dps-charcounter-vim"
# on_cmd = "CharCount"

[[plugins]]
repo = "Omochice/dps-codic-vim"
# repo = "~/workspace/dps-codic-vim"
on_cmd = "Codic"
#
[[plugins]]
repo = "Omochice/dps-translate-vim"
# repo = "~/workspace/dps-translate-vim"
hook_add = """
let g:dps_translate_source = 'en'
let g:dps_translate_target = 'ja'
let g:dps_translate_deepl_token = $DEEPL_TOKEN
let g:dps_translate_engine = empty(g:dps_translate_deepl_token) ? 'google' : 'deepl'
let g:dps_translate_deepl_is_pro = v:false
let g:dps_translate_border = {
    \ 'topLeft': '┌',
    \ 'top':  '─',
    \ 'topRight': '┐',
    \ 'left': '│',
    \ 'right': '│',
    \ 'bottomLeft': '└',
    \ 'bottom':  '─',
    \ 'bottomRight': '┘',
    \ }

nnoremap tr <Cmd>Translate<CR>
nnoremap tR <Cmd>Translate!<CR>
xnoremap <silent>tr :TranslateJoin<CR>
xnoremap <silent>tR :TranslateJoin!<CR>
"""
on_cmd = ["Translate", "TranslateJoin"]

# [[plugins]]
# repo = "yuki-yano/dps-slack-status.vim"
# hook_add = """
# let g:slack_status_emoji = ":dadparrot:"
# """
# on_source = "denops.vim"
#
# # guise.vim not work well on lazy...?
[[plugins]]
repo = "lambdalisue/guise.vim"
on_event = "TermOpen"
depends = "denops.vim"
# # # on_source = "denops.vim"
#
# # [[plugins]]
# # repo = "supporterz-vol5-1/breakTimer-vim"
# # hook_add = """
# # let g:break_timer_username = "Omochice"
# # """
# # depends = ["denops.vim"]
# # on_event = "BufRead"
#
[[plugins]]
# FIXME: ghosttext起動時にleximaが無効化されてる？
repo = "gamoutatsumi/dps-ghosttext.vim"
hook_add = """
let g:dps_ghosttext#ftmap = {
\   'biz.quest.signate.jp': 'python',
\   'play.golang.org': 'go',
\   'cloudlatex.io': 'tex',
\   'redmine': 'markdown',
\ }
"""
depends = "denops.vim"
on_cmd = "GhostStart"
#
# [[plugins]]
# repo = "skanehira/denops-germanium.vim"
# hook_add = """
# command! -range MyGermanium Germanium -f=Firge35NerdConsole-Regular
# """
# depends = "denops.vim"
# on_cmd = ["MyGermanium", "Germanium"]
#
# [[plugins]]
# # repo = "~/workspace/dps-dein-star.vim"
# repo = "Omochice/dps-dein-star.vim"
# hook_add = """
# let g:dps_dein_star_token = $GITHUB_TOKEN
# let g:dps_dein_star_ignore_users = ['Omochice']
# let g:dps_dein_star_debug = v:true
# """
# # depends = "denops.vim"
# on_source = "denops.vim"
# # on_cmd = ""

# ddc.vim {{{
[[plugins]]
repo = "Shougo/ddu-commands.vim"
depends = "ddu.vim"
on_cmd = ["Ddu"]

[[plugins]]
repo = "Shougo/ddu.vim"
depends = "denops.vim"
hook_add = """
let g:ddu_window_width_percent = 0.45
let g:ddu_window_height_percent = 0.9
"""
hook_source = """
call ddu#custom#patch_global({
\ 'ui': 'ff',
\ 'sources': [{'name': 'file_rec', 'params': {},}],
\ 'sourceOptions': {
\   '_': {
\     'ignoreCase': v:true,
\     'matchers': ['matcher_fzf'],
\   },
\ },
\ 'kindOptions': {
\   'file': {
\     'defaultAction': 'open',
\   },
\ },
\ 'uiParams': {
\   'ff': {
\     'split': 'floating',
\     'filterSplitDirection': 'floating',
\     'filterFloatingPosition': 'top',
\     'prompt': '> ',
\     'winWidth': float2nr(&columns * g:ddu_window_width_percent),
\     'winHeight': float2nr(&lines * g:ddu_window_height_percent),
\     'winCol': float2nr((&columns - (&columns * g:ddu_window_width_percent) * 2) / 2),
\     'winRow': float2nr((&lines - (&lines * g:ddu_window_height_percent)) / 2),
\     'previewFloating': v:true,
\     'previewVertical': v:true,
\     'previewWidth': float2nr(&columns * g:ddu_window_width_percent),
\     'previewHeight': float2nr(&columns * g:ddu_window_height_percent),
\     'startFilter': v:true,
\   },
\ },
\ })
"""

[[plugins]]
repo = "Shougo/ddu-ui-ff"
# repo = "~/workspace/toybox/ddu-ui-ff"
on_source = "ddu.vim"
[plugins.ftplugin]
ddu-ff = """
" augroup ddu_my_settings
"   autocmd!
"   autocmd CursorMoved <buffer> call ddu#ui#ff#do_action('preview')
" augroup END
nnoremap <buffer><silent> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><silent> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
nnoremap <buffer><silent> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
nnoremap <buffer><silent> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
nnoremap <buffer><silent> p <Cmd>call ddu#ui#ff#do_action('preview')<CR>
"""
ddu-ff-filter = """
inoremap <buffer><silent> <CR> <Esc><Cmd>close<CR>
nnoremap <buffer><silent> <CR> <Cmd>close<CR>
nnoremap <buffer><silent> q <Cmd>close<CR>
inoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)')<CR>
inoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)')<CR>
"""

[[plugins]]
repo = "Shougo/ddu-source-file_rec"
on_source = "ddu.vim"

# [[plugins]]
# repo = "Shougo/ddu-filter-matcher_substring"
# on_source = "ddu.vim"

[[plugins]]
repo = "yuki-yano/ddu-filter-fzf"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-kind-file"
on_source = "ddu.vim"

# }}}

[[plugins]]
repo = "~/workspace/dps-popup-toy"
on_cmd = "DpsPopupToy"
