[[plugins]]
repo = "vim-denops/denops.vim"
hook_add = """
command! DenopsRestart call denops#server#restart()
"""

# {{{ ddc
[[plugins]]
repo = "Shougo/ddc.vim"
hook_add = """
inoremap <silent><expr> <C-Space> ddc#manual_complete()
let g:ddc_use_pum = v:true
let g:ddc_use_cmdline = v:false

if g:ddc_use_cmdline
  nnoremap : <Cmd>call CommandlinePre()<CR>:
  function! CommandlinePre() abort
    call dein#source('ddc.vim')
    cnoremap <expr> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ ddc#manual_complete()
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y> <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e> <Cmd>call pum#map#cancel()<CR>
    cnoremap <expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
    cnoremap <expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources',
            \ ['necovim', 'cmdline-history', 'around', 'file'])
    call ddc#custom#patch_buffer('sourceOptions', {
            \ 'necovim': {
                \ 'maxCandidates': 15},
            \ 'around': {
                \ 'maxCandidates': 5},
            \ 'file': {
                \ 'maxCandidates': 5},
            \ })
    augroup ddc_cmdline_internal
      autocmd!
      autocmd CmdlineLeave * ++once call CommandlinePost()
    augroup END
    " Enable command line completion
    call ddc#enable_cmdline_completion()
    call ddc#enable()
  endfunction
  function! CommandlinePost() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
    cunmap <Tab>
  endfunction
endif
"""
hook_source = """
call ddc#custom#patch_global(
 \ 'sources', ['vsnip', 'vim-lsp', 'around', 'buffer', 'tmux']
 \ )
call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'matchers': ['matcher_fuzzy'],
  \   'sorters': ['sorter_fuzzy'],
  \   'converters': ['converter_remove_overlap', 'converter_fuzzy'],
  \   'minAutoCompleteLength': 1,
  \   'ignoreCase': v:true,
  \ },
  \ 'vim-lsp': {
  \   'mark': 'LSP',
  \   'isVolatile': v:true,
  \   'forceCompletionPattern': '\.|:|->|"\w+/',
  \ },
  \ 'buffer': {'mark': 'Buf'},
  \ 'around': {'mark': 'Ard'},
  \ 'necovim': {'mark': 'Nec'},
  \ 'vsnip': {'mark': 'Snp'},
  \ 'tmux': {'mark': 'Tmx'},
  \ 'cmdline-history': {
  \   'mark': 'Hst',
  \   'maxCandidates': 100,
  \   'minAutoCompleteLength': 5,
  \ },
  \ 'file': {
  \   'mark': 'Fil',
  \   'isVolatile': v:true,
  \   'forceCompletionPattern': '\S/\S*',
  \ },
  \ })
call ddc#custom#patch_filetype(
  \ ['toml'], 'sources', ['necovim', 'around', 'buffer', 'tmux']
  \ )
call ddc#custom#patch_filetype(
  \ ['vim'], 'sources', ['vsnip', 'vim-lsp', 'necovim', 'around', 'buffer', 'tmux']
  \ )
call ddc#custom#patch_filetype(
  \ ['markdown'], 'sources', ['vsnip', 'file', 'around', 'buffer', 'tmux']
  \ )

if g:ddc_use_pum
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
endif
call ddc#enable()
"""
depends = ["denops.vim", "context_filetype.vim", "pum.vim"]
on_event = "InsertEnter"

[[plugins]]
repo = "Shougo/pum.vim"
hook_add = """
inoremap <expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
inoremap <expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
"""
# TODO
# I want to move the settings to multiple_plugins/hook_source, but the feature is not provided.
depends = ["lexima.vim"]
hook_source = """
imap <silent><expr> <CR> pum#visible() ?
  \ vsnip#expandable() ? '<Cmd>call pum#map#confirm()<CR>' : lexima#expand('<LT>CR>', 'i') :
  \ lexima#expand('<LT>CR>', 'i')
imap <silent><expr> <Tab>   vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : lexima#expand('<Tab>', 'i')
smap <silent><expr> <Tab>   vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <silent><expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <silent><expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
"""

[[multiple_plugins]]
plugins = ["pum.vim", "vim-vsnip", "lexima.vim"]
# The below cant be loaded.
hook_source = """
" echomsg "exists?"
"""

[[plugins]]
repo = "shun/ddc-vim-lsp"
depends = ["vim-lsp"]
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-around"
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-matcher_head"
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-sorter_rank"
on_source = "ddc.vim"

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = "Shougo/neco-vim"
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/ddc-buffer"
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-converter_remove_overlap"
on_source = "ddc.vim"


[[plugins]]
repo = "delphinus/ddc-tmux"
on_source = "ddc.vim"

[[plugins]]
repo = "tani/ddc-fuzzy"
on_source = "ddc.vim"

[[plugins]]
repo = "LumaKernel/ddc-file"
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/denops-popup-preview.vim"
hook_source = """
call popup_preview#enable()
"""
on_source = "ddc.vim"
# }}}

[[plugins]]
repo = "Omochice/dps-popup-test"
# repo = "~/workspace/dps-popup-test"
on_source = "denops.vim"

[[plugins]]
repo = "Omochice/dps-paiza-io-vim"
# repo = "~/workspace/dps-paiza-io-vim"
on_cmd = "PaizaIO"

[[plugins]]
repo = "Omochice/dps-charcounter-vim"
# repo = "~/workspace/dps-charcounter-vim"
on_cmd = "CharCount"

[[plugins]]
repo = "Omochice/dps-codic-vim"
# repo = "~/workspace/dps-codic-vim"
on_cmd = "Codic"

[[plugins]]
repo = "Omochice/dps-translate-vim"
# repo = "~/workspace/dps-translate-vim"
hook_add = """
let g:dps_translate_source = "en"
let g:dps_translate_target = "ja"

nnoremap tr <Cmd>Translate<CR>
nnoremap tR <Cmd>Translate!<CR>
vnoremap <silent>tr :TranslateJoin<CR>
vnoremap <silent>tR :TranslateJoin!<CR>
"""
on_cmd = ["Translate", "TranslateJoin"]

[[plugins]]
repo = "yuki-yano/dps-slack-status.vim"
hook_add = """
let g:slack_status_emoji = ":dadparrot:"
"""
on_source = "denops.vim"

[[plugins]]
repo = "lambdalisue/guise.vim"
on_source = "denops.vim"

# [[plugins]]
# repo = "supporterz-vol5-1/breakTimer-vim"
# hook_add = """
# let g:break_timer_username = "Omochice"
# """
# depends = ["denops.vim"]
# on_event = "BufRead"
