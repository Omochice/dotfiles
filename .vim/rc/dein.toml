[[plugins]]
repo = "Shougo/dein.vim"
hook_add = """
let g:dein#auto_recache = v:true
"""

# complete plugins
# Move its into lazy.toml
# not work well?
# i have no idea to solve it.
# [[plugins]]
# repo = "Shougo/ddc.vim"
# hook_add = """
# call ddc#custom#patch_global(
#   \ 'sources', ['ddc-vim-lsp', 'buffer', 'around']
#   \ )
# call ddc#custom#patch_global('sourceOptions', {
#   \ '_': {
#   \   'matchers': ['matcher_editdistance'],
#   \   'sorters': ['sorter_rank'],
#   \ },
#   \ 'ddc-vim-lsp': {'mark': 'LSP'},
#   \ 'buffer': {'mark': 'Buffer'},
#   \ 'around': {"mark": "Around"},
#   \ 'necovim': {"mark": "Neco"},
#   \ })
# call ddc#enable()
# inoremap <silent><expr> <C-Space> pumvisible() ? "\<C-Space>" : ddc#manual_complete()
# """
# depends = ["denops.vim", "context_filetype.vim", "ddc-vim-lsp",
#            "ddc-buffer", "ddc-around", "ddc-sorter_rank", "ddc-filter_editdistance",]
# 
# [[plugins]]
# repo = "shun/ddc-vim-lsp"
# depends = ["vim-lsp"]
# 
# [[plugins]]
# repo = "Shougo/ddc-around"
# 
# [[plugins]]
# repo = "Shougo/ddc-matcher_head"
# 
# [[plugins]]
# repo = 'Shougo/ddc-sorter_rank'
# 
# [[plugins]]
# repo = "Shougo/neco-vim"
# 
# [[plugins]]
# repo = 'matsui54/ddc-buffer'
# 
# [[plugins]]
# repo = 'matsui54/ddc-filter_editdistance'

# [[plugins]]
# repo = "prabirshrestha/asyncomplete.vim"
# hook_add = """
# imap <C-Space> <Plug>(asyncomplete_force_refresh)
# let g:asyncomplete_auto_completeopt = v:true
# let g:asyncomplete_matchfuzzy = v:true
# let g:asyncomplete_auto_popup = v:true
# let g:asyncomplete_auto_completeopt = v:false
# """
# 
# [[plugins]]
# repo = "prabirshrestha/asyncomplete-buffer.vim"
# hook_add = """
# call asyncomplete#register_source(
# \    asyncomplete#sources#buffer#get_source_options({
# \       "name": "Buffer",
# \       "allowlist": ["*"],
# \       "completor": function("asyncomplete#sources#buffer#completor"),
# \       "config": {
# \           "max_buffer_size": 5000000,
# \       },
# \   })
# \)
# """
# depends = ["asyncomplete.vim"]
# 
# [[plugins]]
# repo = "prabirshrestha/asyncomplete-lsp.vim"
# depends = ["asyncomplete.vim", "vim-lsp"]
# 
# [[plugins]]
# repo = "prabirshrestha/asyncomplete-file.vim"
# hook_add = """
# call asyncomplete#register_source(
# \   asyncomplete#sources#file#get_source_options({
#    \ 'name': 'File',
#    \ 'allowlist': ['*'],
#    \ 'priority': 10,
#    \ 'completor': function('asyncomplete#sources#file#completor')
#    \ }))
# """
# on_source = "asyncomplete.vim"

[[plugins]]
repo = "Omochice/night-owl.vim"
hook_add = """
augroup colorcshemeSetting
    autocmd!
    autocmd VimEnter * nested colorscheme night-owl
augroup END
"""

[[plugins]]
repo = "vim-jp/vimdoc-ja"
hook_add = """
if !has("nvim")
    set helplang=ja
else
    set helplang=en
endif
"""

[[plugins]]
repo = "cocopon/vaffle.vim"
hook_add = """
command! TVaffle :tabnew | :Vaffle
autocmd StdinReadPre * let s:std_in = v:true
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Vaffle | endif

" if load dein, use vaffle instead of netrw
let g:loaded_netrw             = v:true
let g:loaded_netrwPlugin       = v:true
let g:loaded_netrwSettings     = v:true
let g:loaded_netrwFileHandlers = v:true
"""

[[plugins]]
repo = "prabirshrestha/vim-lsp"
hook_add = """
let g:lsp_diagnostics_enabled = v:true
let g:lsp_diagnostics_virtual_text_enabled = v:false
let g:lsp_diagnostics_echo_cursor = v:true
let g:lsp_diagnostics_echo_delay = 100
nnoremap <silent><C-h>    <Cmd>LspHover<CR>
nnoremap <silent><Space>f <Cmd>LspDocumentFormatSync<CR>
nnoremap <silent><Space>d <Cmd>LspDocumentDiagnostics<CR>
nnoremap <silent><Space>r <Cmd>LspRename<CR>

let g:lsp_settings = {
\    "efm-langserver": {"disabled": v:false},
\    "html-langserver": {"allowlist": ["html", "htmldjango"]},
\}
let g:lsp_text_edit_enabled = v:true
let g:lsp_diagnostics_signs_error = {"text": "ðŸ˜¡"}
let g:lsp_diagnostics_signs_warning = {"text": "ðŸ¤”"}
"""

[[plugins]]
repo = "mattn/vim-lsp-settings"
depends = "vim-lsp"

[[plugins]]
repo = "markonm/traces.vim"

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = """
set noshowmode
let g:lightline = {
\    "colorscheme": "nightowl",
\    "active": {
\        "left": [
\            ["mode", "paste"],
\            ["gitbranch", "readonly", "filename", "modified"]
\        ]
\    },
\    "component_function": {
\        "gitbranch": "LightlineFugitive",
\        "filetype": "LightlineFt",
\        "fileformat": "LightlineFotmat",
\    },
\ }

function! LightlineFt()
    if winwidth(0) > 70
        if strlen(&filetype)
            return &filetype . " " . WebDevIconsGetFileTypeSymbol()
        else
            return "no ft"
        endif
    else
        return ""
    endif
endfunction

function! LightlineFotmat()
    if winwidth(0) > 70
        return &fileformat .  " " . WebDevIconsGetFileFormatSymbol()
    else
        return ""
    endif
endfunction

function LightlineFugitive()
    if exists("*FugitiveHead")
        let s:branch = FugitiveHead()
        if s:branch !=# ""
            return s:branch . " " . "ï‡“"
        endif
    endif
    return ""
endfunction
"""
depends = ["night-owl.vim", "vim-devicons", "vim-fugitive"]

[[plugins]]
repo = "easymotion/vim-easymotion"
hook_add = """
nmap f <Plug>(easymotion-tn)
nmap <Space>j <Plug>(easymotion-j)
nmap <Space>k <Plug>(easymotion-k)
nmap <Space>l <Plug>(easymotion-lineforward)
nmap <Space>h <Plug>(easymotion-linebackward)
let g:EasyMotion_smartcase = v:true
let g:EasyMotion_use_smartsign_jp = v:true
"""

[[plugins]]
repo = "tyru/caw.vim"
hook_add = """
" Brute force solution
" https://github.com/tyru/caw.vim/issues/166
" augroup cawSetting
"     autocmd!
"     autocmd FileType * nmap <buffer><Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
"     autocmd FileType * vmap <buffer><Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
" augroup END
nmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
vmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
"""
depends = ["context_filetype.vim", "vim-repeat"]
# FIXME
# not work dot-repeat in caw

[[plugins]]
repo = "kana/vim-repeat"

[[plugins]]
repo = "Shougo/context_filetype.vim"

[[plugins]]
repo = "hrsh7th/vim-vsnip"
hook_add = """
let g:vsnip_snippet_dir = $HOME .. "/.vim/snippets/"
imap <expr><C-n> vsnip#jumpable(v:true) ? '<Plug>(vsnip-jump-next)' : '<C-n>'
"""

[[plugins]]
repo = "hrsh7th/vim-vsnip-integ"
depends = ["vim-vsnip"]

[[plugins]]
repo = "junegunn/fzf"
build = "./install --all"
merged = 0

[[plugins]]
repo = "yuki-yano/fzf-preview.vim"
rev = "release/rpc"
hook_add = """
nmap <C-p> [fzf-p]
nnoremap [fzf-p]<C-p> <Cmd>FzfPreviewDirectoryFiles<CR>
nnoremap [fzf-p]c     <Cmd>FzfPreviewCommandPaletteRpc<CR>
nnoremap [fzf-p]g     :<C-u>FzfPreviewProjectGrepRpc<Space>
let g:fzf_preview_fzf_preview_window_option = "right:50%"
let g:fzf_preview_use_dev_icons = v:true
let g:fzf_preview_dev_icon_prefix_string_length = 3
let g:fzf_preview_dev_icons_limit = 5000
"""
depends = ["vim-devicons", "fzf"]

[[plugins]]
repo = "simeji/winresizer"
hook_add = """
let g:winresizer_vert_resize = 3
"""


[[plugins]]
repo = "vim-denops/denops.vim"
hook_add = """
" let g:denops#server#service#deno_args = [
" \    '-q',
" \    '--unstable',
" \    '-A',
" \]
" set runtimepath^=~/workspace/dps-paiza-io-vim
" set runtimepath^=~/workspace/Hackathon-vol5-vim
command! DenopsRestart call denops#server#restart()
"""

[[plugins]]
# repo = "~/workspace/dps-test"
repo = "Omochice/dps-popup-test"
depends = ["denops.vim"]

[[plugins]]
repo = "Omochice/dps-paiza-io-vim"
# repo = "~/workspace/dps-paiza-io-vim"
depends = ["denops.vim"]

[[plugins]]
repo = "Omochice/dps-charcounter-vim"
# repo = "~/workspace/dps-charcounter-vim"
depends = ["denops.vim"]

[[plugins]]
repo = "Omochice/dps-codic-vim"
# repo = "~/workspace/dps-codic-vim"
depends = ["denops.vim"]

[[plugins]]
repo = "Omochice/dps-translate-vim"
# repo = "~/workspace/dps-translate-vim"
depends = ["denops.vim"]
hook_add = """
let g:dps_translate_source = "en"
let g:dps_translate_target = "ja"

nnoremap tr <Cmd>Translate<CR>
nnoremap tR <Cmd>Translate!<CR>
vnoremap <silent>tr :TranslateJoin<CR>
vnoremap <silent>tR :TranslateJoin!<CR>
"""

[[plugins]]
repo = "yuki-yano/dps-slack-status.vim"
depends = ["denops.vim"]
hook_add = """
let g:slack_status_emoji = ":dadparrot:"
"""

[[plugins]]
repo = "kana/vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-line"
depends = ["vim-textobj-uesr"]

[[plugins]]
repo = "terryma/vim-expand-region"
hook_add = """
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
"""
depends = ["vim-textobj-user", "vim-textobj-line"]

[[plugins]]
repo = "kana/vim-textobj-indent"

[[plugins]]
repo = "osyo-manga/vim-textobj-multiblock"

[[plugins]]
repo = "Shougo/vimproc.vim"
build = "make"

[[plugins]]
repo = "thinca/vim-quickrun"
hook_add = """
nnoremap <silent><Space>q <Cmd>QuickRun<CR>
let g:quickrun_config = {
\    "_" : {
\        "runner" : "vimproc",
\        "runner/vimproc/updatetime" : 40,
\    }
\ }
"""
depends = ["vimproc.vim"]

# [[plugins]]
# repo = "heavenshell/vim-quickrun-hook-unittest"
# hook_add = """
# nnoremap <silent> <Space>qt :<C-u>QuickRun -mode n -runner job -hook/unittest/enable 1<CR>
# """

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "voldikss/vim-floaterm"
hook_add = """
command! Lazygit FloatermNew --autoclose=2 --height=1.0 --width=1.0 --title=lazygit lazygit
command! Fkill FloatermKill
nnoremap <silent><C-g> <Cmd>Lazygit<CR>
"""

[[plugins]]
# repo = "bronson/vim-trailing-whitespace"
repo = "ntpeters/vim-better-whitespace"
hook_add = """
let g:better_whitespace_enabled = v:true
let g:strip_whitespace_on_save = v:false
"""

[[plugins]]
repo = "lambdalisue/suda.vim"
hook_add = """
let g:suda_smart_edit = v:true
"""

[[plugins]]
repo = "lambdalisue/seethrough.vim"
hook_add = """
let g:seethrough_disabled = v:false
"""
depends = ["night-owl.vim"]

[[plugins]]
repo = "mattn/vim-findroot"
hook_add = """
let g:findroot_not_for_subdir = v:false
"""

# [[plugins]]
# repo = "nvim-treesitter/nvim-treesitter"
# if = "has('nvim')"
# hook_add = """
# lua << EOF
# require'nvim-treesitter.configs'.setup {
#   highlight = {
#     enable = true,
#     disable = {},
#   },
#   -- Install parsers automatically
#   ensure_installed = 'all'
# }
# EOF
# """
# merged = 0
# hook_source = """
# lua require("plugins.nvim-treesitter")
# """
# hook_post_update = "TSUpdate"

# [[plugins]]
# repo = "tsuyoshicho/codic-web.vim"
# hook_add = """
# let g:codic_web_token = $CODIC_TOKEN
# """
