[[plugins]]
hook_add = """
augroup colorcshemeSetting
    autocmd!
    colorscheme night-owl
    let g:lightline = {"colorscheme": "nightowl"}
    autocmd VimEnter * ++nested colorscheme night-owl
    autocmd Colorscheme * highlight Normal ctermbg=NONE guibg=NONE
    autocmd Colorscheme * highlight NonText ctermbg=NONE guibg=NONE
    autocmd Colorscheme * highlight LineNr ctermbg=NONE guibg=NONE
    autocmd Colorscheme * highlight Folded ctermbg=NONE guibg=NONE
    autocmd Colorscheme * highlight EndOfBuffer ctermbg=NONE guibg=NONE
augroup END
"""
repo = "haishanh/night-owl.vim"

[[plugins]]
hook_add = "set helplang=ja"
repo = "vim-jp/vimdoc-ja"

[[plugins]]
repo = "cocopon/vaffle.vim"

[[plugins]]
hook_add = """
let g:lsp_diagnostics_enabled = 1
let g:lsp_doagnostics_echo_cursor = 1
"""
repo = "prabirshrestha/vim-lsp"

[[plugins]]
hook_add = """
let g:lsp_settings = {
\    "efm-langserver": { "disabled": v:false },
\    "pyls-all": {
\       "workspace_config": {
\           "pyls": {
\                "plugins": {
\                   "autopep8": {"enabled": v:false}
\                }
\           }
\       }
\   }
\}
let g:lsp_text_edit_enabled = 1
"""
repo = "mattn/vim-lsp-settings"

[[plugins]]
repo = "mattn/vim-lsp-icons"

[[plugins]]
hook_add = """
inoremap <expr><Tab> pumvisible() ? "\<C-n>": "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <C-space> <Plug>(asyncomplete_force_refresh)
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_matchfuzzy = 1
"""
repo = "prabirshrestha/asyncomplete.vim"

[[plugins]]
repo = "prabirshrestha/asyncomplete-lsp.vim"

[[plugins]]
repo = "markonm/traces.vim"

[[plugins]]
repo = "jiangmiao/auto-pairs"

[[plugins]]
hook_add = """
set noshowmode
set laststatus=2
"""
repo = "itchyny/lightline.vim"

[[plugins]]
hook_add = """
nmap f <Plug>(easymotion-tn)
nmap <Space>j <Plug>(easymotion-j)
nmap <Space>k <Plug>(easymotion-k)
nmap <Space>l <Plug>(easymotion-lineforward)
nmap <Space>h <Plug>(easymotion-linebackward)
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_jp = 1
"""
repo = "easymotion/vim-easymotion"

[[plugins]]
repo = "tomtom/tcomment_vim"

[[plugins]]
hook_add = """
imap <expr><C-j> vsnip#expandable() ? "<Plug>(vsnip-expand)"
smap <expr><C-j> vsnip#expandable() ? "<Plug>(vsnip-expand)"
imap <expr><Tab> vsnip#jumpable(1) ? "<Plug>(vsnip-jump-next)" : "<Tab>"
smap <expr><Tab> vsnip#jumpable(1) ? "<Plug>(vsnip-jump-next)" : "<Tab>"
"""
repo = "hrsh7th/vim-vsnip"

[[plugins]]
repo = "hrsh7th/vim-vsnip-integ"

[[plugins]]
hook_add = """
let g:translate_source = "en"
let g:translate_target = "ja"
"""
repo = "skanehira/translate.vim"

[[plugins]]
repo = "junegunn/fzf"
build = "./install --all"
merged = 0

[[plugins]]
repo = "yuki-yano/fzf-preview.vim"
rev = "release/rpc"
hook_add = """
nmap <C-p> [fzf-p]
nnoremap [fzf-p]<C-p> :<C-u>FzfPreviewDirectoryFiles<CR>
nnoremap [fzf-p]c :<C-u>FzfPreviewCommandPaletteRpc<CR>
"""

[[plugins]]
repo = "simeji/winresizer"
hook_add = """
let g:winresizer_vert_resize = 3
"""

[[plugins]]
repo = "tpope/vim-surround"

[[plugins]]
repo = "vim-denops/denops.vim"
hook_add = """
let g:denops#script#typecheck = 0
"""

[[plugins]]
repo = "Omochice/dps-codic-vim"
depends = ["denops.vim"]

[[plugins]]
repo = "kana/vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-line"
depends = ["vim-textobj-uesr"]

[[plugins]]
repo = "terryma/vim-expand-region"
hook_add = """
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
"""
depends = ["vim-textobj-user", "vim-textobj-line"]
