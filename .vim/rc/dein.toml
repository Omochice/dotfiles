[[plugins]]
repo = "Shougo/dein.vim"
hook_add = """
let g:dein#auto_recache = v:true
"""

[[plugins]]
repo = "sainnhe/sonokai"
hook_add = """
augroup colorschemeSetting
    autocmd!
    autocmd VimEnter * nested colorscheme sonokai
augroup END
let g:sonokai_style = "espresso"
let g:sonokai_enable_italic = v:false
let g:sonokai_disable_italic_comment = v:true
"""

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = """
set noshowmode
let g:lightline = {
\    "colorscheme": "sonokai",
\    "active": {
\        "left": [
\            ["mode", "paste"],
\            ["gitbranch", "readonly", "filename", "modified"],
\        ],
\    },
\    "component_function": {
\        "gitbranch": "LightlineFugitive",
\        "filetype": "LightlineFileType",
\        "fileformat": "LightlineFotmat",
\    },
\ }

function! LightlineFileType()
    if winwidth(0) > 70
        if strlen(&filetype)
            return &filetype . " " . WebDevIconsGetFileTypeSymbol()
        else
            return "no ft"
        endif
    else
        return ""
    endif
endfunction

function! LightlineFotmat()
    if winwidth(0) > 70
        return &fileformat .  " " . WebDevIconsGetFileFormatSymbol()
    else
        return ""
    endif
endfunction

function LightlineFugitive()
    if exists("*FugitiveHead")
        let s:branch = FugitiveHead()
        if s:branch !=# ""
            return s:branch . " " . "ï‡“"
        endif
    endif
    return ""
endfunction
"""
depends = ["vim-devicons", "vim-fugitive"]

[[plugins]]
repo = "vim-jp/vimdoc-ja"
hook_add = """
if has("nvim")
    set helplang=en " default
else
    set helplang=ja
endif
"""

[[plugins]]
repo = "cocopon/vaffle.vim"
hook_add = """
command! TVaffle :tabnew | :Vaffle
autocmd StdinReadPre * let s:std_in = v:true
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Vaffle | endif

" if load this plugin, use vaffle instead of netrw
let g:loaded_netrw             = v:true
let g:loaded_netrwPlugin       = v:true
let g:loaded_netrwSettings     = v:true
let g:loaded_netrwFileHandlers = v:true
"""

[[plugins]]
repo = "prabirshrestha/vim-lsp"
hook_add = """
let g:lsp_diagnostics_enabled = v:true
let g:lsp_diagnostics_virtual_text_enabled = v:false
let g:lsp_diagnostics_echo_cursor = v:true
let g:lsp_diagnostics_echo_delay = 100
nmap <silent> <C-h> <Plug>(lsp-hover)
nmap <silent> <Space>f <Plug>(lsp-document-format)
nmap <silent> <Space>d <Plug>(lsp-document-diagnostics)
nmap <silent> <Space>r <Plug>(lsp-rename)

let g:lsp_settings = {
\    "efm-langserver": {"disabled": v:false},
\    "html-langserver": {"allowlist": ["html", "htmldjango"]},
\}
let g:lsp_text_edit_enabled = v:true
let g:lsp_diagnostics_signs_error = {"text": "ðŸ˜¡"}
let g:lsp_diagnostics_signs_warning = {"text": "ðŸ¤”"}
"""

[[plugins]]
repo = "mattn/vim-lsp-settings"
depends = "vim-lsp"

[[plugins]]
repo = "markonm/traces.vim"

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = "tyru/caw.vim"
hook_add = """
" Brute force solution
" https://github.com/tyru/caw.vim/issues/166
" augroup cawSetting
"     autocmd!
"     autocmd FileType * nmap <buffer><Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
"     autocmd FileType * vmap <buffer><Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
" augroup END
nmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
vmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)<ESC>
"""
depends = ["context_filetype.vim", "vim-repeat"]
# FIXME
# not work dot-repeat in caw

[[plugins]]
repo = "kana/vim-repeat"

[[plugins]]
repo = "junegunn/fzf"
build = "./install --all"
merged = 0

[[plugins]]
repo = "yuki-yano/fzf-preview.vim"
rev = "release/rpc"
hook_add = """
nmap <C-p> [fzf-p]
nnoremap [fzf-p]<C-p> <Cmd>FzfPreviewDirectoryFiles<CR>
nnoremap [fzf-p]c     <Cmd>FzfPreviewCommandPaletteRpc<CR>
nnoremap [fzf-p]g     :<C-u>FzfPreviewProjectGrepRpc<Space>
let g:fzf_preview_fzf_preview_window_option = "right:50%"
let g:fzf_preview_use_dev_icons = v:true
let g:fzf_preview_dev_icon_prefix_string_length = 3
let g:fzf_preview_dev_icons_limit = 5000
"""
depends = ["vim-devicons", "fzf"]

[[plugins]]
repo = "simeji/winresizer"
hook_add = """
let g:winresizer_vert_resize = 3
"""

[[plugins]]
repo = "kana/vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-line"
depends = ["vim-textobj-uesr"]

[[plugins]]
repo = "rhysd/vim-textobj-anyblock"
depends = ["vim-textobj-user"]

[[plugins]]
repo = "thinca/vim-textobj-between"
depends = ["vim-textobj-user"]

[[plugins]]
repo = "terryma/vim-expand-region"
hook_add = """
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
"""
depends = ["vim-textobj-user", "vim-textobj-line"]

[[plugins]]
repo = "kana/vim-textobj-indent"
depends = ["vim-textobj-user"]

[[plugin]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "Shougo/vimproc.vim"
build = "make"

[[plugins]]
repo = "thinca/vim-quickrun"
hook_add = """
nmap <silent> <Space>q <Plug>(quickrun)
let g:quickrun_config = extend(get(g:, 'quickrun_config', {}), {
\   '_': {
\       'outputter/buffer/close_on_empty': v:true,
\       'hook/time/enable': 1,
\   },
\   'typescript': {
\       'command': 'deno',
\       'cmdopt': '--allow-all --unstable',
\       'exec': 'NO_COLOR=1 %c run %o %s',
\   },
\})
"""
depends = ["vimproc.vim"]

# [[plugins]]
# repo = "heavenshell/vim-quickrun-hook-unittest"
# hook_add = """
# nnoremap <silent> <Space>qt :<C-u>QuickRun -mode n -runner job -hook/unittest/enable 1<CR>
# """

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "voldikss/vim-floaterm"
hook_add = """
command! Lazygit FloatermNew --autoclose=2 --height=1.0 --width=1.0 --title=lazygit lazygit
command! Fkill FloatermKill
nnoremap <silent><C-g> <Cmd>Lazygit<CR>
"""

[[plugins]]
repo = "ntpeters/vim-better-whitespace"
hook_add = """
let g:better_whitespace_enabled = v:true
let g:strip_whitespace_on_save = v:false
"""

[[plugins]]
repo = "lambdalisue/seethrough.vim"
hook_add = """
let g:seethrough_disabled = v:false
"""

[[plugins]]
repo = "mattn/vim-findroot"
hook_add = """
let g:findroot_not_for_subdir = v:false
"""
