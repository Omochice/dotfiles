*mermaid.txt*                       Generate diagrams from markdown-like text.

==============================================================================
CONTENTS                                                    *mermaid-contents*

FlowChart		|mermaid-flowchart|
	Nodes		|mermaid-flowchart-nodes|
	Edges		|mermaid-flowchart-edges|
Sequence Diagram	|mermaid-sequence|
Class Diagram		|mermaid-class|
State Diagram		|mermaid-state|
Git Graph Diagram	|mermaid-git-graph|
Architecture Diagram	|mermaid-architecture|

==============================================================================
FlowChart                                                  *mermaid-flowchart*

See details: https://mermaid.js.org/syntax/flowchart.html

>mermaid
	graph LR
	    A[Square Rect] -- Link text --> B((Circle))
	    A --> C(Round Rect)
	    B --> D{Rhombus}
	    C --> D
<

------------------------------------------------------------------------------
Nodes                                                *mermaid-flowchart-nodes*
                                         *mermaid-flowchart-well-known-shapes*

| Shape             | Syntax     |
| ----------------- | ---------- |
| Round edge        | `()`         |
| Stadium shape     | `([])`       |
| Subroutine shape  | `[[]]`       |
| Cylindrical shape | `[()]`       |
| Circle            | `(())`       |
| Asymmetric shape  | `>]`         |
| Rhombus           | `{}`         |
| Hexagon           | `{{}}`       |
| Parallelogram     | `[//]`, `[\\]` |
| Trapezoid         | `[/\]`, `[\/]` |
| Double circle     | `((()))`     |

You can specify more shape with like: `A@{ shape: rect }`

See https://mermaid.js.org/syntax/flowchart.html#complete-list-of-new-shapes

------------------------------------------------------------------------------
Edges                                                *mermaid-flowchart-edges*

| Edge           | Syntax                                              |
| -------------- | --------------------------------------------------- |
| Allow          | `A-->B`                                               |
| Open link      | `A---B`                                               |
| With Text      | `A-- This is the text! ---B`, `A---|This is the text|B` |
| Dotted link    | `A-.->B`                                              |
| Thick link     | `A==>B`                                               |
| Invisible link | `A~~~B`                                               |

You can chain the nodes like:

>mermaid
	flowchart LR
	    A -- text --> B -- text2 --> C
<

Fork:

>mermaid
	flowchart TB
	    A & B--> C & D
<

If you want to orderling, use `---->` like edge.

>mermaid
	flowchart TD
	    A[Start] --> B{Is it?}
	    B -->|Yes| C[OK]
	    C --> D[Rethink]
	    D --> B
	    B ---->|No| E[End]
<

------------------------------------------------------------------------------
Grouping                                           *mermaid-flowchart-groupng*

You can group the flowchart by using `subgraph` keyword.

>mermaid
	flowchart TB
	    c1-->a2
	    subgraph one
	    a1-->a2
	    end
	    subgraph two
	    b1-->b2
	    end
	    subgraph three
	    c1-->c2
	    end
	    one --> two
	    three --> two
	    two --> c2
<

==============================================================================
Sequence Diagram                                            *mermaid-sequence*

See details: https://mermaid.js.org/syntax/sequenceDiagram.html

>mermaid
	sequenceDiagram
	    participant Alice
	    participant Bob
	    Alice->>Bob: Hello Bob, how are you?
	    Bob-->>Alice: Great!
	    Alice-)Bob: See you later!
<

------------------------------------------------------------------------------
Participants                                   *mermaid-sequence-participants*

You can define participants with `participant` or `actor` keyword.

>mermaid
	sequenceDiagram
	    participant A as Alice
	    actor J as Bob
	    A->>J: Hello Bob, how are you?
	    J->>A: Great!
<

| node        | syntax                                      |
| ----------- | ------------------------------------------- |
| Paticipant  | `participant`                                 |
| Actor       | `actor`                                       |
| Boundary    | `participant Alice@{ "type": "boundary" }`    |
| Control     | `participant Alice@{ "type": "control" }`     |
| Entity      | `participant Alice@{ "type": "entity" }`      |
| Database    | `participant Alice@{ "type": "database" }`    |
| Collections | `participant Alice@{ "type": "collections" }` |
| Queue       | `participant Alice@{ "type": "queue" }`       |


------------------------------------------------------------------------------
Messages                                           *mermaid-sequence-messages*

| Arrow type                  | Syntax |
| --------------------------- | ------ |
| Solid line                  | `->`     |
| Dotted line                 | `-->`    |
| Solid line with arrowhead   | `->>`    |
| Dotted line with arrowhead  | `-->>`   |
| Solid line with cross       | `-x`     |
| Dotted line with cross      | `--x`    |
| Solid line with open arrow  | `-)`     |
| Dotted line with open arrow | `--)`    |

------------------------------------------------------------------------------
Activations                                     *mermaid-sequence-activations*

You can activate/deactivate participants using `activate` and `deactivate`.

>mermaid
	sequenceDiagram
	    Alice->>Bob: Hello Bob, how are you?
	    activate Bob
	    Bob-->>Alice: Great!
	    deactivate Bob
<

Or use shorthand `+` / `-` suffix:

>mermaid
	sequenceDiagram
	    Alice->>+Bob: Hello Bob, how are you?
	    Bob-->>-Alice: Great!
<

------------------------------------------------------------------------------
Grouping                                           *mermaid-sequence-grouping*

You can group the actors using `box` keyword.

If you omit color, the group will be filled transparent.

>mermaid
	sequenceDiagram
	    box Purple Alice & Bob
	        participant A
	        participant J
	    end
	    box Another Group
	        participant B
	        participant C
	    end
	    A->>J: Hello Bob, how are you?
	    J->>A: Great!
	    A->>B: Hello Bob, how is Charley?
	    B->>C: Hello Charley, how are you?
<

------------------------------------------------------------------------------
Notes                                                 *mermaid-sequence-notes*

Add notes with `Note [right of|left of|over] [Actor]: Text`

>mermaid
	sequenceDiagram
	    participant Bob
	    Note right of Bob: Text in note
	    Note over Alice,Bob: A typical interaction
<

------------------------------------------------------------------------------
LineBreak                                         *mermaid-sequence-linebreak*

Break the line with a `<br/>` word.

>mermaid
	sequenceDiagram
	    Alice->>Bob: Hello Bob are you?
	    Note over Alice,Bob A typical interaction<br/>But now in two lines
<

------------------------------------------------------------------------------
Loops                                                 *mermaid-sequence-loops*

Loop the statements with a `loop` word.


>mermaid
	sequenceDiagram
	    Alice->Bob: Hello Bob, how are you?
	    loop Every minute
	        Bob-->Alice: Great!
	    end
<

------------------------------------------------------------------------------
Alt/Else/Opt                                       *mermaid-sequence-alt-else*

If you want to branch the process, use `alt`, `else` or `opt`.

>mermaid
	sequenceDiagram
	    Alice->>Bob: Hello Bob, how are you?
	    alt is sick
	        Bob->>Alice: Not so good :(
	    else is well
	        Bob->>Alice: Feeling fresh like a daisy
	    end
	    opt Extra response
	        Bob->>Alice: Thanks for asking
	    end
<

------------------------------------------------------------------------------
Parallel                                           *mermaid-sequence-parallel*

`par` word possible to show actions that are happening in parallel.

>mermaid
	sequenceDiagram
	    par Alice to Bob
	        Alice->>Bob: Hello guys!
	    and Alice to Carol
	        Alice->>Carol: Hello guys!
	    end
	    Bob-->>Alice: Hi Alice!
	    Carol-->>Alice: Hi Alice!
<

==============================================================================
Class Diagram                                                  *mermaid-class*

==============================================================================
State Diagram                                                  *mermaid-state*

==============================================================================
Git Graph Diagram                                          *mermaid-git-graph*

==============================================================================
Architecture Diagram                                    *mermaid-architecture*


==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl:
