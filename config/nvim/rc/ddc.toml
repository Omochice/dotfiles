[[plugins]]
repo = "Shougo/ddc.vim"
lua_add = """
local vimx = require("artemis")
vimx.g.ddc_source_options = {
  _ = {
    matchers = { "matcher_fuzzy" },
    sorters = { "sorter_fuzzy" },
    converters = { "converter_remove_overlap", "converter_fuzzy" },
    minAutoCompleteLength = 2,
    ignoreCase = true,
  }
}

vimx.g.ddc_sources = {
  snippet = { "vsnip" },
  lsp = { "vim-lsp" },
  ["in-vim"] = { "around", "buffer" },
  ["out-vim"] = { "rg" },
}

vimx.keymap.set(
  "i",
  "<C-Space>",
  "",
  {
    expr = true,
    callback = function()
      vimx.fn.ddc.map.manual_complete()
    end
  }
)
vimx.keymap.set(
  "i",
  "<C-x><C-x>",
  "",
  {
    expr = true,
    callback = function()
      vimx.fn.ddc.map.manual_complete({ "vim-lsp" })
    end
  }
)
if vimx.fn.dein.tap("vim-vsnip-integ") == 1 then
  vimx.g.ddc_source_options.vsnip = { mark = "[Snp]" }
end
"""
lua_source = """
local vimx = require("artemis")
vimx.fn.ddc.custom.patch_global(
  "sources",
  { "vsnip", "vim-lsp", "around", "buffer", "rg", }
)

-- TODO: なんかよくわからんけどluaだといけない
-- vimx.fn.ddc.custom.patch_global(
--   "sourceOptions",
--   vimx.cast(vimx.g.ddc_source_options)
-- )
vimx.cmd "call ddc#custom#patch_global('sourceOptions', g:ddc_source_options)"

vimx.fn.ddc.custom.patch_filetype(
  { "toml", "vim" },
  "sources",
  { "vsnip", "necovim", "vim-lsp", "around", "buffer", "rg" }
)

vimx.fn.ddc.custom.patch_filetype(
  "markdown",
  "sources",
  { "vsnip", "file", "around", "buffer", "rg", }
)

vimx.fn.ddc.custom.patch_global("ui", "pum")
vimx.fn.ddc.custom.patch_global("backspaceCompletion", true)
vimx.fn.ddc.enable()
"""
depends = ["denops.vim"]
on_event = "InsertEnter"

[[plugins]]
repo = "Shougo/pum.vim"
hook_add = """
inoremap <expr> <C-y> pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<C-y>'
inoremap <expr> <C-n> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<C-n>'
inoremap <expr> <C-p> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-p>'
augroup myvimrc#pum#internal
  autocmd!
  autocmd User myvimrc#close_pum call pum#close()
augroup END
"""
hook_source = """
call pum#set_option("auto_select", v:true)
"""

[[plugins]]
repo = "Shougo/ddc-ui-pum"
on_source = "ddc.vim"
depends = ["pum.vim"]

# [[multiple_plugins]]
# plugins = ["pum.vim", "lexima.vim"]
# hook_source in multiple_plugins is not provided
# hook_source =

[[plugins]]
repo = "shun/ddc-vim-lsp"
lua_source = """
local vimx  = require("artemis")
vimx.g.ddc_source_options["vim-lsp"] = {
  mark = "[LSP]",
  isVolatile = true,
  forceCompletionPattern = [[\..?|:|->|\w+/]]
}
"""
depends = ["vim-lsp"]
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-around"
hook_source = """
let g:ddc_source_options['around'] = #{mark: '[Ard]'}
"""
on_source = "ddc.vim"

# [[plugins]]
# repo = "Shougo/ddc-matcher_head"
# on_source = "ddc.vim"

# [[plugins]]
# repo = "Shougo/ddc-sorter_rank"
# on_source = "ddc.vim"

# [[plugins]]
# repo = 'Shougo/ddc-cmdline-history'
# hook_source = """
# let g:ddc_source_options['cmdline-history'] = {
# \   'mark': 'Hst',
# \   'maxItems': 100,
# \   'minAutoCompleteLength': 5,
# \ }
# """
# on_source = 'ddc.vim'

[[plugins]]
repo = "Shougo/neco-vim"
hook_source = """
let g:ddc_source_options['necovim'] = #{mark: '[Nec]'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/ddc-buffer"
hook_source = """
let g:ddc_source_options['buffer'] = #{mark: '[Buf]'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-converter_remove_overlap"
on_source = "ddc.vim"

[[plugins]]
repo = "delphinus/ddc-tmux"
hook_source = """
let g:ddc_source_options['tmux'] = #{mark: '[Tmx]'}
"""
on_source = "ddc.vim"

[[plugins]]
repo = "tani/ddc-fuzzy"
on_source = "ddc.vim"

[[plugins]]
repo = "LumaKernel/ddc-file"
hook_source = """
let g:ddc_source_options['file'] = #{
      \   mark: '[Fil]',
      \   isVolatile: v:true,
      \   forceCompletionPattern: '\S/\S*',
      \ }
"""
on_source = "ddc.vim"

[[plugins]]
repo = "Shougo/ddc-rg"
hook_source = """
let g:ddc_source_options['rg'] = #{
      \   mark: '[Rg]',
      \   minAutoCompleteLength: 4,
      \   maxItems: 20,
      \ }
"""
on_source = "ddc.vim"

# [[plugins]]
# repo = "matsui54/denops-popup-preview.vim"
# hook_source = """
# call popup_preview#enable()
# """
# on_source = "ddc.vim"

[[plugins]]
repo = "matsui54/denops-signature_help"
hook_add = """
let g:signature_help_config = #{
      \   style: 'labelOnly',
      \ }
"""
hook_source = """
call signature_help#enable()
"""
on_source = "ddc.vim"
