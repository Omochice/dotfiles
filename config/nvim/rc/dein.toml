hook_add = """
function s:disable_bgcolor() abort
  highlight FloatBorder ctermbg=NONE guibg=NONE
  highlight NormalFloat ctermbg=NONE guibg=NONE
  highlight Special ctermbg=NONE guibg=NONE
  highlight link TreesitterContext Pmenu
endfunction

augroup vimrc#colorsetting
  autocmd!
  autocmd ColorScheme * call timer_start(0, { -> s:disable_bgcolor() })
  autocmd VimEnter * nested colorscheme sonokai
augroup END
"""

[[plugins]]
repo = "Shougo/dein.vim"

[[plugins]]
repo = "sainnhe/sonokai"
hook_add = """
let g:sonokai_style = 'espresso'
let g:sonokai_dim_inactive_windows = v:false
let g:sonokai_enable_italic = v:false
let g:sonokai_disable_italic_comment = v:true
"""

[[plugins]]
repo = "catppuccin/vim"
name = "catpuccin"
hook_add = """
augroup erace-cursorline
  autocmd!
"  autocmd ColorScheme * highlight CursorLine guisp=NONE guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE gui=NONE cterm=NONE
augroup END
"""

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = """
set noshowmode
let g:lightline = #{
      \ colorscheme: 'default',
      \ active: #{
      \   left: [
      \     ['mode', 'paste'],
      \     ['gitbranch', 'readonly', 'filename', 'modified'],
      \   ],
      \ },
      \ component_function: #{
      \   gitbranch: 'gitbranch#name',
      \   filetype: 'LightlineFileType',
      \   fileformat: 'LightlineFotmat',
      \   },
      \ }

function! LightlineFileType() abort
  if winwidth(0) > 70
    if strlen(&filetype) > 0
      return &filetype . ' ' . nerdfont#find()
    else
      return 'no ft'
    endif
  else
    return ''
  endif
endfunction

function! LightlineFotmat() abort
  if winwidth(0) > 70
    return &fileformat .  ' ' . nerdfont#fileformat#find()
  else
    return ''
  endif
endfunction

augroup vimrc#lightline-update-highlight
  autocmd!
  autocmd ColorScheme * call <SID>update_lightline_color()
augroup END

function! s:update_lightline_color() abort
  let g:lightline.colorscheme = g:colors_name
  " Reload lightline
  call lightline#disable()
  call lightline#enable()
endfunction
"""
depends = ["nerdfont.vim", 'vim-gitbranch']

[[plugins]]
repo = "itchyny/vim-gitbranch"

[[plugins]]
repo = "vim-jp/vimdoc-ja"
hook_add = """
if has('nvim')
  set helplang=en " default
else
  set helplang=ja
endif
"""

[[plugins]]
repo = "lambdalisue/nerdfont.vim"

[[plugins]]
repo = "lambdalisue/seethrough.vim"
hook_add = """
let g:seethrough_disabled = has('gui_running')
"""

[[plugins]]
repo = "mattn/vim-findroot"
hook_add = """
let g:findroot_not_for_subdir = v:false
"""

# [[plugins]]
# repo = "vim-jp/vim-streem"

[[plugins]]
repo = "vim-scripts/fish.vim"

# [[plugins]]
# repo = "mityu/vim-applescript"

[[plugins]]
repo = "rcarriga/nvim-notify"
lua_source = """
notify = require("notify")
notify.setup({
  background_colour = '#000000',
})
vim.notify = notify
ns = vim.api.nvim_create_namespace('sample')
vim.ui_attach(ns, {ext_popupmenu=true}, function (a, ...)
  vim.fn.echomsg(a)
  vim.fn.echomsg(...)
  -- notify.notify(a, vim.inspect { ... })
end)
"""
if = "has('nvim')"

[[plugins]]
repo = "MunifTanjim/nui.nvim"
if = "has('nvim')"

[[plugins]]
repo = "folke/noice.nvim"
hook_add = """
set cmdheight=0
"""
lua_source = """
require("noice").setup({
  lsp = {
    -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
    override = {
      ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
      ["vim.lsp.util.stylize_markdown"] = true,
      ["cmp.entry.get_documentation"] = true,
    },
  },
  -- you can enable a preset for easier configuration
  presets = {
    bottom_search = true, -- use a classic bottom cmdline for search
    command_palette = true, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
    inc_rename = false, -- enables an input dialog for inc-rename.nvim
    lsp_doc_border = false, -- add a border to hover docs and signature help
  },
})
"""
depends = ["nui.nvim", "nvim-notify"]
if = "has('nvim')"
