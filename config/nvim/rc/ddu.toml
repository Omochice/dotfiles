[[plugins]]
repo = "Shougo/ddu.vim"
depends = "denops.vim"
lua_add = """
local vimx = require("artemis")

vimx.keymap.set("n", "<C-p>", "<Plug>(ddu-prefix)")
-- artemis.dict({})がarrayを返してきてるっぽいのでー
vimx.keymap.set(
  "n",
  "<Plug>(ddu-prefix)<C-p>",
  "<Cmd>call ddu#start({})<CR>"
)

vimx.keymap.set(
  "n",
  "<Plug>(ddu-prefix)<C-w>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "mr",
        params = { kind = "mrw" }
      } }
    })
  end
)

vimx.keymap.set(
  "n",
  "<Plug>(ddu-prefix)<C-b>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "buffer"
      } }
    })
  end
)

vimx.keymap.set(
  "n",
  "<Plug>(ddu-prefix)<C-l>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "rg",
        options = { marcher = {} }
      } },
      uiParams = {
        ff = { ignoreEmpty = false }
      },
      volaitle = true,
    })
  end
)

function grepWrapper(word)
  if word == "" then
    return
  end
  vimx.fn.ddu.start({
    ui = "ff",
    sources = { {
      name = "rg",
      params = { input = word },
    } },
    sourceOptions = {
      rg = { matchers = {
        'converter_display_word',
        'matcher_fzf',
      } }
    }
  })
end

vimx.create_command(
  "DduGrep",
  function(opts)
    grepWrapper(opts.args)
  end,
  { nargs = 1 }
)

vimx.keymap.set(
  "n",
  "<Plug>(ddu-prefix)<C-g>",
  ":<C-u>DduGrep "
)

vimx.keymap.set(
  "n",
  "<Plug>(ddu-prefix)g",
  function()
    grepWrapper(vimx.fn.expand("<cword>"))
  end
)
"""
lua_source = """
local vimx = require("artemis")

local config = {
  ui = "ff",
  sources = { {
    name = "file_rec",
    params = {
      ignoredDirectories = {
        ".git",
        "node_modules",
      }
    }
  } },
  sourceOptions = {
    _ = {
      ignoreCase = true,
      matchers = { "matcher_fzf" },
    },
  },
  sourceParams = {
    rg = {
      rg = {
        matchers = {
          "converter_display_word",
          "matcher_substring",
        }
      },
      args = {
        "--json",
        "--ignore-case",
      }
    },
    mru = {
      mr = {
        kind = "mru",
        current = true,
      }
    }
  },
  filterParams = {
    matcher_fzf = {
      highlightMathced = "Search",
    },
    matcher_substring = {
      highlightMathced = "Search",
    }
  },
  kindOptions = {
    file = {
      defaultAction = "open"
    },
  },
  uiParams = {
    ff = {
      ignoreEmpty = true,
      split = "floating",
      filterSplitDirection = "floating",
      filterFloatingPosition = "top",
      prompt = ">",
      previewFloating = true,
      previewVertical = true,
      startFilter = true,
      floatingBorder = {
        "┌", "─", "┐", "│", "┘", "─", "└", "│",
      },
      previewFloatingBorder = {
        "┌", "─", "┐", "│", "┘", "─", "└", "│",
      },
      previewFloatingZindex = 100,
    }
  }
}

local function reset_size()
  local win_col = math.floor(vimx.go.columns * 0.1)
  local win_width = math.floor(vimx.go.columns * 0.8)
  local win_row = math.floor(vimx.go.lines * 0.1)
  local win_height = math.floor(vimx.go.lines * 0.8)
  config.uiParams.ff.winCol = win_col
  config.uiParams.ff.winWidth = win_width
  config.uiParams.ff.winRow = win_row
  config.uiParams.ff.winHeight = win_height

  config.uiParams.ff.previewCol = math.floor(win_col - win_width * 0.5)
  config.uiParams.ff.previewWidth = math.floor(win_width * 0.5)
  config.uiParams.ff.previewRow = win_row
  config.uiParams.ff.previewheight = win_height
  vimx.fn.ddu.custom.patch_global(config)
  vimx.g.hogehoge = config
end

reset_size()

local group = vimx.create_augroup("ddu-reset-size", { clear = true })
vimx.create_autocmd(
  "VimResized",
  {
    group = group,
    pattern = "*",
    callback = reset_size
  }
)
"""
on_func = ["ddu#start"]
on_map = { n = "<Plug>(ddu" }

# \     autoAction: #{ name: 'preview' },

[[plugins]]
repo = "Shougo/ddu-ui-ff"
on_source = "ddu.vim"
[plugins.ftplugin]
ddu-ff = """
setlocal cursorline
cnoreabbrev <buffer> q call ddu#ui#ff#do_action('quit')
nnoremap <buffer> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><nowait> T <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'open', params: #{ command: 'tabedit' } })<CR>
nnoremap <buffer><nowait> V <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'open', params: #{ command: 'vsplit' } })<CR>
nnoremap <buffer><nowait> S <Cmd>call ddu#ui#ff#do_action('itemAction', #{ name: 'open', params: #{ command: 'split' } })<CR>
nnoremap <buffer> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
nnoremap <buffer><nowait> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
nnoremap <buffer><nowait> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
nnoremap <buffer><nowait> p <Cmd>call ddu#ui#ff#do_action('preview')<CR>
nnoremap <buffer> <C-w><C-w> <C-w><C-w>
" nnoremap <buffer> <C-o> <Cmd>call ddu#ui#ff#do_action('test')<CR>
"""
ddu-ff-filter = """
cnoreabbrev <buffer> q call ddu#ui#ff#do_action('quit')
inoremap <buffer><nowait> <C-o> <Cmd>call ddu#ui#ff#execute('call ddu#ui#ff#do_action("preview")')<CR>
inoremap <buffer> <CR> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "edit" }, }
\ )')<CR>
" NOTE: gt is needed
inoremap <buffer> <C-t> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "tabedit" }, }
\ )')<CR>gtgTgt
inoremap <buffer> <C-v> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "vsplit" }, }
\ )')<CR>
inoremap <buffer> <C-s> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "split" }, }
\ )')<CR>
inoremap <buffer> <C-q> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "quickfix", }
\ )')<CR>
nnoremap <buffer> <CR> <Cmd>call ddu#ui#ff#close()<CR>
nnoremap <buffer><nowait> q <Cmd>call ddu#ui#ff#close()<CR>
inoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)<Bar>redraw')<CR>
inoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-w><C-w> <C-w><C-w>
"""

[[plugins]]
repo = "Shougo/ddu-source-file_rec"
on_source = "ddu.vim"

[[plugins]]
repo = "shun/ddu-source-rg"
on_source = "ddu.vim"

[[plugins]]
repo = "kuuote/ddu-source-mr"
on_source = "ddu.vim"
depends = ["mr.vim"]

[[plugins]]
repo = "lambdalisue/mr.vim"
on_func = ["mr#mru#list", "mr#mrr#list", "mr#mrw#list"]

[[plugins]]
repo = "shun/ddu-source-buffer"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-converter_display_word"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-matcher_substring"
on_source = "ddu.vim"

[[plugins]]
repo = "yuki-yano/ddu-filter-fzf"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-kind-file"
on_source = "ddu.vim"

# [[plugins]]
# repo = "lambdalisue/kensaku.vim"
# depends = ["denops.vim"]
# on_source = "denops.vim"
