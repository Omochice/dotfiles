[[plugins]]
repo = "Shougo/ddu.vim"
depends = "denops.vim"
hook_add = """
let g:ddu_window_width_percent = 0.45
let g:ddu_window_height_percent = 0.9
nmap <C-p> <Plug>(ddu-prefix)
nmap <Plug>(ddu-prefix)<C-p> <Cmd>call ddu#start({})<CR>
nmap <Plug>(ddu-prefix)<C-w> <Cmd>call ddu#start(#{sources: [#{name: 'mr', params: #{ kind: 'mru' }}]})<CR>
nmap <Plug>(ddu-prefix)<C-b> <Cmd>call ddu#start(#{sources: [#{name: 'buffer'}]})<CR>
function! s:ddu_grep_wrapper(query) abort
  if !empty(a:query)
    call ddu#start(#{sources: [#{name: 'rg', params: #{input: a:query}}], sourceOptions: #{rg: #{ matchers: ['converter_display_word', 'matcher_fzf'] }}})
  endif
endfunction

command! -nargs=1 DduGrep call <SID>ddu_grep_wrapper(<q-args>)
nmap <Plug>(ddu-prefix)<C-g> :<C-u>DduGrep<Space>
nmap <Plug>(ddu-prefix)<C-l> <Cmd>call ddu#start(#{
    \ sources: [#{name: 'rg', options: #{matcher: []}}],
    \ uiParams: #{
    \   ff: #{ ignoreEmpty: v:false,}
    \ },
    \ volatile: v:true,
    \ })<CR>
nmap <Plug>(ddu-prefix)g <Cmd>call <SID>ddu_grep_wrapper(expand('<cword>'))<CR>
"""
hook_source = """
let s:config = #{
\ ui: 'ff',
\ sources: [#{name: 'file_rec', params: #{ ignoredDirectories: ['.git', 'node_modules', 'dein'] },}],
\ sourceOptions: #{
\   _: #{
\     ignoreCase: v:true,
\     matchers: ['matcher_fzf'],
\   },
\ },
\ sourceParams: #{
\   rg: #{
\     rg: #{
\       matchers: ['converter_display_word', 'matcher_substring'],
\     },
\     args  : ["--json", "--ignore-case"],
\   },
\   mru: #{
\     mr: #{
\       kind: 'mru',
\       current: v:true,
\     },
\   },
\ },
\ filterParams: #{
\   matcher_fzf: #{
\     highlightMatched: 'Search',
\   },
\   matcher_substring: #{
\     highlightMatched: 'Search',
\   },
\ },
\ kindOptions: #{
\   file: #{
\     defaultAction: 'open',
\   },
\ },
\ uiParams: #{
\   ff: #{
\     ignoreEmpty: v:true,
\     split: 'floating',
\     filterSplitDirection: 'floating',
\     filterFloatingPosition: 'top',
\     prompt: '>',
\     previewFloating: v:true,
\     previewVertical: v:true,
\     startFilter: v:true,
\     floatingBorder: ['┌', '─', '┐', '│', '┘', '─', '└', '│'],
\     previewFloatingBorder: ['┌', '─', '┐', '│', '┘', '─', '└', '│'],
\     previewFloatingZindex: 100,
\   },
\ },
\ }
function! s:set_size() abort
  " this from kuuote/dotvim
  let s:config.uiParams.ff.winWidth = float2nr(&columns * g:ddu_window_width_percent*2)
  let s:config.uiParams.ff.winHeight = float2nr(&lines * g:ddu_window_height_percent)
  let s:config.uiParams.ff.winCol = float2nr((1 - g:ddu_window_width_percent * 2)/2 * &columns) + 2
  let s:config.uiParams.ff.winRow = float2nr((1 - g:ddu_window_height_percent)/2 * &lines) + 1
  let s:config.uiParams.ff.previewWidth = float2nr(&columns * g:ddu_window_width_percent)
  let s:config.uiParams.ff.previewHeight = float2nr(&lines * g:ddu_window_height_percent)
endfunction

function! s:reset_size() abort
  call s:set_size()
  call ddu#custom#patch_global(s:config)
endfunction

call s:reset_size()
augroup ddu-reset-size
  autocmd!
  autocmd VimResized * call <SID>reset()
augroup END
"""

# \     autoAction: #{ name: 'preview' },

[[plugins]]
repo = "Shougo/ddu-ui-ff"
on_source = "ddu.vim"
[plugins.ftplugin]
ddu-ff = """
cnoreabbrev <buffer> q call ddu#ui#ff#do_action('quit')
nnoremap <buffer> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><nowait> T <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'open', 'params': { 'command': 'tabedit' } })<CR>
nnoremap <buffer><nowait> V <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'open', 'params': { 'command': 'vsplit' } })<CR>
nnoremap <buffer><nowait> S <Cmd>call ddu#ui#ff#do_action('itemAction', { 'name': 'open', 'params': { 'command': 'split' } })<CR>
nnoremap <buffer> <Space> <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
nnoremap <buffer><nowait> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
nnoremap <buffer><nowait> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
nnoremap <buffer><nowait> p <Cmd>call ddu#ui#ff#do_action('preview')<CR>
nnoremap <buffer> <C-w><C-w> <C-w><C-w>
nnoremap <buffer> <C-o> <Cmd>call ddu#ui#ff#do_action('test')<CR>
"""
ddu-ff-filter = """
cnoreabbrev <buffer> q call ddu#ui#ff#do_action('quit')
inoremap <buffer><nowait> <C-o> <Cmd>call ddu#ui#ff#execute('call ddu#ui#ff#do_action("preview")')<CR>
inoremap <buffer> <CR> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "edit" }, }
\)')<CR>
" NOTE: gt is needed
inoremap <buffer> <C-t> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "tabedit" }, }
\)')<CR>gtgTgt
inoremap <buffer> <C-v> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "vsplit" }, }
\)')<CR>
inoremap <buffer> <C-s> <Cmd>call ddu#ui#ff#execute(
\ 'call ddu#ui#ff#do_action(
\   "itemAction",
\   #{ name: "open", params: #{ command: "split" }, }
\)')<CR>
nnoremap <buffer> <CR> <Cmd>call ddu#ui#ff#close()<CR>
nnoremap <buffer><nowait> q <Cmd>call ddu#ui#ff#close()<CR>
inoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)<Bar>redraw')<CR>
inoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")+1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute('call cursor(line(".")-1,0)<Bar>redraw')<CR>
nnoremap <buffer> <C-w><C-w> <C-w><C-w>
"""

[[plugins]]
repo = "Shougo/ddu-source-file_rec"
on_source = "ddu.vim"

[[plugins]]
repo = "shun/ddu-source-rg"
on_source = "ddu.vim"

[[plugins]]
repo = "kuuote/ddu-source-mr"
on_source = "ddu.vim"

[[plugins]]
repo = "shun/ddu-source-buffer"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-converter_display_word"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-matcher_substring"
on_source = "ddu.vim"

[[plugins]]
repo = "yuki-yano/ddu-filter-fzf"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-kind-file"
on_source = "ddu.vim"
