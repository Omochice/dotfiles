[[plugins]]
repo = "Shougo/ddu.vim"
depends = "denops.vim"
lua_add = """
local vimx = require("artemis")
local prefix = "<Plug>(ddu-prefix)"

vimx.keymap.set("n", "<C-p>", prefix)
vimx.keymap.set(
  "n",
  prefix .. "<C-p>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "file_rec",
        params = {
          ignoredDirectories = {
            ".git",
            "node_modules",
          }
        }
      } }
    })
  end
)

vimx.keymap.set(
  "n",
  prefix .. "<C-w>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "mr",
        params = { kind = "mrw" }
      } }
    })
  end
)

vimx.keymap.set(
  "n",
  prefix .. "<C-b>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "buffer"
      } }
    })
  end
)

vimx.keymap.set(
  "n",
  prefix .. "<C-l>",
  function()
    vimx.fn.ddu.start({
      ui = "ff",
      sources = { {
        name = "rg",
        options = { marcher = {} }
      } },
      uiParams = {
        ff = { ignoreEmpty = false }
      },
      volatile = true,
    })
  end
)

vimx.keymap.set(
  "n",
  prefix .. "<C-t>",
  function()
    local id = vimx.fn.denops.callback.register(
      function(s)
        vimx.fn.sonictemplate.apply(s, "n")
      end,
      { once = true }
    )
    vimx.fn.ddu.start({
      sources = {
        {
          name = "custom-list",
          params = {
            texts = vimx.fn.sonictemplate.complete("", "", 0),
            callbackId = id,
          }
        }
      }
    })
  end
)

function grepWrapper(word)
  if word == "" then
    return
  end
  vimx.fn.ddu.start({
    ui = "ff",
    sources = { {
      name = "rg",
      params = { input = word },
    } },
    sourceOptions = {
      rg = { matchers = {
        'converter_display_word',
        'matcher_fzf',
      } }
    }
  })
end

vimx.create_command(
  "DduGrep",
  function(opts)
    grepWrapper(opts.args)
  end,
  { nargs = 1 }
)

vimx.keymap.set(
  "n",
  prefix .. "<C-g>",
  ":<C-u>DduGrep "
)

vimx.keymap.set(
  "n",
  prefix .. "g",
  function()
    grepWrapper(vimx.fn.expand("<cword>"))
  end
)
"""
lua_source = """
local vimx = require("artemis")

local config = {
  ui = "ff",
  sources = { {
    name = "file_rec",
    params = {
      ignoredDirectories = {
        ".git",
        "node_modules",
      }
    }
  } },
  sourceOptions = {
    _ = {
      ignoreCase = true,
      matchers = { "matcher_fzf" },
    },
  },
  sourceParams = {
    rg = {
      rg = {
        matchers = {
          "converter_display_word",
          "matcher_substring",
        }
      },
      args = {
        "--json",
        "--ignore-case",
      }
    },
    mru = {
      mr = {
        kind = "mru",
        current = true,
      }
    }
  },
  filterParams = {
    matcher_fzf = {
      highlightMathced = "Search",
    },
    matcher_substring = {
      highlightMathced = "Search",
    }
  },
  kindOptions = {
    file = {
      defaultAction = "open"
    },
    ["custom-list"] = {
      defaultAction = "callback",
    },
  },
  uiParams = {
    ff = {
      ignoreEmpty = true,
      split = "floating",
      filterSplitDirection = "floating",
      filterFloatingPosition = "top",
      prompt = ">",
      previewFloating = true,
      previewSplit = "vertical",
      autoAction = { name = "preview" },
      startFilter = true,
      floatingBorder = {
        "┌", "─", "┐", "│", "┘", "─", "└", "│",
      },
      previewFloatingBorder = {
        "┌", "─", "┐", "│", "┘", "─", "└", "│",
      },
      previewFloatingZindex = 100,
    }
  }
}

local function reset_size()
  local win_col = math.floor(vimx.go.columns * 0.1)
  local win_width = math.floor(vimx.go.columns * 0.8)
  local win_row = math.floor(vimx.go.lines * 0.1)
  local win_height = math.floor(vimx.go.lines * 0.8)
  config.uiParams.ff.winCol = win_col
  config.uiParams.ff.winWidth = win_width
  config.uiParams.ff.winRow = win_row
  config.uiParams.ff.winHeight = win_height

  config.uiParams.ff.previewCol = math.floor(win_col - win_width * 0.5)
  config.uiParams.ff.previewWidth = math.floor(win_width * 0.5)
  config.uiParams.ff.previewRow = win_row
  config.uiParams.ff.previewheight = win_height
  vimx.fn.ddu.custom.patch_global(config)
end

reset_size()

local group = vimx.create_augroup("ddu-reset-size", { clear = true })
vimx.create_autocmd(
  "VimResized",
  {
    group = group,
    pattern = "*",
    callback = reset_size
  }
)
"""
on_func = ["ddu#start"]
on_map = { n = "<Plug>(ddu" }

[[plugins]]
repo = "Shougo/ddu-ui-ff"
on_source = "ddu.vim"
lua_add = """
local vimx = require("artemis")
local opts = { buffer = true, nowait = true }
local group = vimx.create_augroup("vimrc#ddu_keymap", { clear = true })
local resets = { { key = "<C-w><C-w>" } }
vimx.create_autocmd(
  "FileType",
  {
    group = group,
    pattern = "ddu-ff",
    callback = function()
      vimx.bo.cursorline = true
      vimx.cmd([[cnoreabbrev <buffer> q call ddu#ui#do_action('quit')]])
      local mappings = {
        { key = "<CR>", action = "itemAction" },
        { key = "T", action = "itemAction", opts = { name = "open", params = { command = "tabedit" } } },
        { key = "V", action = "itemAction", opts = { name = "open", params = { command = "vsplit" } } },
        { key = "S", action = "itemAction", opts = { name = "open", params = { command = "split" } } },
        { key = "<Space>", action = "toggleSelectItem" },
        { key = "i", action = "openFilterWindow" },
        { key = "q", action = "quit" },
        { key = "p", action = "preview" },
      }
      for _, mapping in ipairs(mappings) do
        vimx.keymap.set(
          "n",
          mapping.key,
          function()
            vimx.fn.ddu.ui.do_action(mapping.action, mapping.opts)
          end
        )
      end
      for _, mapping in ipairs(resets) do
        vimx.keymap.set("n", mapping.key, mapping.key, opts)
      end
    end
  }
)
vimx.create_autocmd(
  "FileType",
  {
    group = group,
    pattern = "ddu-ff-filter",
    callback = function()
      vimx.cmd([[cnoreabbrev <buffer> q call ddu#ui#do_action('quit')]])
      -- mapping of "do_action"
      local mode_mappings = {
        i = {
          { key = "<CR>", actions = {{ action = "itemAction" }} },
          { key = "<C-t>", actions = {{ action = "itemAction", opts = { name = "open", params = { command = "tabedit" } } }} },
          { key = "<C-v>", actions = {{ action = "itemAction", opts = { name = "open", params = { command = "vsplit" } } }} },
          { key = "<C-s>", actions = {{ action = "itemAction", opts = { name = "open", params = { command = "split" } } }} },
          { key = "<C-q>", actions = {{ action = "itemAction", opts = { name = "quickfix" } }} },
          { key = "<Space>", actions = {{ action = "toggleSelectItem", opts = { name = "quickfix" } }} },
          { key = "<C-g>", actions = {
              { action = "clearSelectAllItems" },
              { action = "toggleAllItems" },
              { action = "itemAction", opts = { name = "quickfix" } },
          } },
          { key = "<C-o>", actions = {{ action = "preview" }} },
        },
        n = {
          { key = "<CR>", actions = {{ action = "closeFilterWindow" }} }
        }
      }
      for mode, mappings in pairs(mode_mappings) do
        for _, mapping in ipairs(mappings) do
          vimx.keymap.set(
            mode,
            mapping.key,
            function()
              for _, act in ipairs(mapping.actions) do
                vimx.fn.ddu.ui.do_action(act.action, act.opts)
              end
            end,
            opts
          )
        end
      end
      -- mapping of "execute"
      local executes = {
        { key = "<C-n>", executes = { "call cursor(line('.')+1,0)", "redraw" } },
        { key = "<C-p>", executes = { "call cursor(line('.')-1,0)", "redraw" } },
      }
      for _, mode in ipairs({ "n", "i" }) do
        for _, execute in ipairs(executes) do
          vimx.keymap.set(
            mode,
            execute.key,
            function()
              for _, cmd in ipairs(execute.executes) do
                vimx.fn.ddu.ui.ff.execute(cmd)
              end
            end,
            opts
          )
        end
      end
      for _, mapping in ipairs(resets) do
        vimx.keymap.set("n", mapping.key, mapping.key, opts)
      end
    end
  }
)
"""

[[plugins]]
repo = "Shougo/ddu-source-file_rec"
on_source = "ddu.vim"

[[plugins]]
repo = "shun/ddu-source-rg"
on_source = "ddu.vim"

[[plugins]]
repo = "kuuote/ddu-source-mr"
on_source = "ddu.vim"
depends = ["mr.vim"]

[[plugins]]
repo = "lambdalisue/mr.vim"
on_func = ["mr#mru#list", "mr#mrr#list", "mr#mrw#list"]

[[plugins]]
repo = "shun/ddu-source-buffer"
on_source = "ddu.vim"

[[plugins]]
repo = "liquidz/ddu-source-custom-list"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-converter_display_word"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-filter-matcher_substring"
on_source = "ddu.vim"

[[plugins]]
repo = "yuki-yano/ddu-filter-fzf"
on_source = "ddu.vim"

[[plugins]]
repo = "Shougo/ddu-kind-file"
on_source = "ddu.vim"

# [[plugins]]
# repo = "lambdalisue/kensaku.vim"
# depends = ["denops.vim"]
# on_source = "denops.vim"
