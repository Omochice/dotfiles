[[plugins]]
repo = "kana/vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-line"
depends = "vim-textobj-user"
hook_add = """
xmap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
omap al <Plug>(textobj-line-a)
omap il <Plug>(textobj-line-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "thinca/vim-textobj-between"
depends = ["vim-textobj-user"]
hook_add = """
xmap af <Plug>(textobj-between-a)
xmap if <Plug>(textobj-between-i)
omap af <Plug>(textobj-between-a)
omap if <Plug>(textobj-between-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "kana/vim-textobj-fold"
hook_add = """
xmap az <Plug>(textobj-fold-a)
xmap iz <Plug>(textobj-fold-i)
omap az <Plug>(textobj-fold-a)
omap iz <Plug>(textobj-fold-i)
"""
depends = ["vim-textobj-user"]
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "Omochice/vim-textobj-codeblock"
depends = ["vim-textobj-user"]
hook_add = """
let g:textobj_codeblock_fence = #{ toml: '\"\"\"' }
xmap ac <Plug>(textobj-codeblock-a)
xmap ic <Plug>(textobj-codeblock-i)
omap ac <Plug>(textobj-codeblock-a)
omap ic <Plug>(textobj-codeblock-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "Omochice/vim-textobj-bettertag"
hook_add = """
xnoremap it <Plug>(textobj-bettertag-i)
onoremap it <Plug>(textobj-bettertag-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }
depends = ["vim-textobj-user"]

[[plugins]]
repo = "kana/vim-textobj-indent"
depends = ["vim-textobj-user"]
hook_add = """
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
omap ai <Plug>(textobj-indent-a)
omap ii <Plug>(textobj-indent-i)
"""
on_map = { x = "<Plug>", o = "<Plug>" }

[[plugins]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "kana/vim-repeat"

[[plugins]]
repo = "easymotion/vim-easymotion"
hook_add = """
nmap <Space>j <Plug>(easymotion-j)
nmap <Space>k <Plug>(easymotion-k)
nmap <Space>l <Plug>(easymotion-lineforward)
nmap <Space>h <Plug>(easymotion-linebackward)
let g:EasyMotion_smartcase = v:true
let g:EasyMotion_use_smartsign_jp = v:true
"""
on_map = { n = "<Plug>" }

[[plugins]]
repo = "hrsh7th/vim-searchx"
lua_add = """
local vimx = require("artemis")
vimx.g.searchx = {
  auto_accept = true,
  scrollof = vimx.go.scrolloff,
  scrolltile = 0,
  markers = vimx.fn.split("ABCDEFGHIJKLMNOPQRSTUVWXYZ", [[.\zs]]),
}
"""
hook_add = """
nnoremap ? <Cmd>call searchx#start(#{ dir: 0 })<CR>
nnoremap / <Cmd>call searchx#start(#{ dir: 1 })<CR>
xnoremap ? <Cmd>call searchx#start(#{ dir: 0 })<CR>
xnoremap / <Cmd>call searchx#start(#{ dir: 1 })<CR>

nnoremap N <Cmd>call searchx#prev()<CR>
nnoremap n <Cmd>call searchx#next()<CR>
xnoremap N <Cmd>call searchx#prev()<CR>
xnoremap n <Cmd>call searchx#next()<CR>

" Convert search pattern.
function g:searchx.convert(input) abort
  if a:input !~# '\k'
    return '\V' .. a:input
  endif
  return join(split(a:input, ' '), '.\{-}')
endfunction
"""
on_func = "searchx"

[[plugins]]
repo = "haya14busa/vim-asterisk"
hook_add = """
nmap * <Plug>(asterisk-z*)
xmap * <Plug>(asterisk-z*)
"""
on_map = { n = "<Plug>" }

[[plugins]]
repo = "hrsh7th/vim-vsnip"
hooks_file = "$DEIN_RC_DIR/hooks/vsnip.lua"
on_map = { x = "<Plug>", i = "<Plug>" }
depends = ["lexima.vim"] # Need this for control order to sourcing
on_event = "InsertEnter"

[[plugins]]
repo = "cohama/lexima.vim"
hooks_file = "$DEIN_RC_DIR/hooks/lexima.lua"
on_event = "InsertEnter"

# Below not work
# [[multiple_plugins]]
# plugins = ["vim-vsnip", "lexima"]
# hook_source = """
# " imap <silent><expr> <Tab> vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : lexima#expand('<LT>Tab>', 'i')
# " xmap <silent><expr> <Tab> vsnip#jumpable(+1) ? '<Plug>(vsnip-jump-next)' : lexima#expand('<LT>Tab>', 'i')
# """

[[plugins]]
repo = "prabirshrestha/vim-lsp"
hooks_file = ["$DEIN_RC_DIR/hooks/vim-lsp.lua", "$DEIN_RC_DIR/hooks/vim-lsp.vim"]
on_event = ["BufRead", "BufNewFile"]
if = "!has('nvim')"

[[plugins]]
repo = "mattn/vim-lsp-settings"
hook_add = """
let g:lsp_settings_enable_suggestions = v:false
"""
on_source = "vim-lsp"

[[plugins]]
repo = "neovim/nvim-lspconfig"
on_lua = "lspconfig"
if = "has('nvim')"

[[plugins]]
repo = "williamboman/mason.nvim"
on_lua = "mason"
if = "has('nvim')"

[[plugins]]
repo = "williamboman/mason-lspconfig.nvim"
on_event = ["BufRead", "BufNewFile"]
hooks_file = "$DEIN_RC_DIR/hooks/mason-lspconfig.lua"
if = "has('nvim')"

[[plugins]]
repo = "nvimdev/lspsaga.nvim"
on_event = ["LspAttach"]
hooks_file = "$DEIN_RC_DIR/hooks/lspsaga.lua"

[[plugins]]
repo = "machakann/vim-sandwich"
hook_add = """
let g:sandwich_no_default_key_mappings = v:true
nnoremap s <nop>
nmap sa <Plug>(sandwich-add)
xmap S <Plug>(sandwich-add)
nmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)
nmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)

omap ib <Plug>(textobj-sandwich-auto-i)
xmap ib <Plug>(textobj-sandwich-auto-i)
omap ab <Plug>(textobj-sandwich-auto-a)
xmap ab <Plug>(textobj-sandwich-auto-a)

omap is <Plug>(textobj-sandwich-query-i)
xmap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)
xmap as <Plug>(textobj-sandwich-query-a)
"""
depends = "vim-textobj-user"
[plugins.on_map]
n = "<Plug>"
x = ["<Plug>", "<Plug>(textobj-sandwich"]
o = "<Plug>(textobj-sandwich"

[[plugins]]
repo = "uga-rosa/contextment.vim"
# repo = "~/Toy/contextment.vim"
hook_add = """
nnoremap gc <Plug>(contextment)
nnoremap gcc <Plug>(contextment-line)
xnoremap gc <Plug>(contextment)
onoremap gc <Plug>(contextment)
"""
depends = ["context_filetype.vim"]
on_map = { nxo = "<Plug>" }

[[plugins]]
repo = "markonm/traces.vim"
on_event = "CmdlineEnter"

[[plugins]]
repo = "liuchengxu/vista.vim"
depends = ["vim-lsp"]
on_cmd = "Vista"
hook_add = """
let g:vista_default_executive = has('nvim') ? 'nvim_lsp' : 'vim_lsp'
"""

[[plugins]]
repo = "simeji/winresizer"
hook_add = """
function s:number_of_non_float() abort
  " on floating / popup window is return 'popup'.
  return tabpagebuflist()
        \ ->map({ _, nr -> win_findbuf(nr) })
        \ ->flatten()
        \ ->sort()
        \ ->uniq()
        \ ->filter({ _, nr -> win_gettype(nr) != 'popup' })
        \ ->len()
endfunction

nnoremap <C-e> <Cmd>WinResizerStartResize<CR>
nnoremap <expr><C-w><C-w> <SID>number_of_non_float() > 2
    \ ? '<cmd>WinResizerStartFocus<CR>'
    \ : '<C-w><C-w>'
let g:winresizer_vert_resize = 3
"""
on_cmd = ["WinResizerStartResize", "WinResizerStartFocus"]

[[plugins]]
repo = "thinca/vim-quickrun"
depends = ["vim-quickrun-neovim-job"]
hooks_file = "$DEIN_RC_DIR/hooks/quickrun.lua"
on_map = { n = "<Plug>" }
on_cmd = ["QuickRun"]

[[plugins]]
repo = "lambdalisue/vim-quickrun-neovim-job"
on_source = "vim-quickrun"

# [[plugins]]
# repo = "Omochice/TeXTable.vim"
# on_cmd = "TeXTable"

# [[plugins]]
# repo = "Omochice/TeXOutline.vim"
# on_cmd = "TeXOutline"

[[plugins]]
repo = "ntpeters/vim-better-whitespace"
hook_add = """
let g:better_whitespace_enabled = !has('nvim')
let g:strip_whitespace_on_save = v:false
"""
on_cmd = ["StripWhitespace", "StripWhitespaceOnChangedLines"]

[[plugins]]
repo = "heavenshell/vim-pydocstring"
build = "make install"
hook_add = """
let g:pydocstring_formatter = 'google'
"""
on_cmd = ["Pydocstring", "PydocstringFormat"]

[[plugins]]
repo = "mattn/vim-maketable"
on_cmd = "MakeTable"

[[plugins]]
repo = "previm/previm"
on_cmd = "PrevimOpen"
hook_add = """
let g:previm_wsl_mode = has('wsl')
let g:previm_show_header = v:false
"""
depends = ["open-browser.vim"]

[[plugins]]
repo = "tyru/open-browser.vim"
hook_add = """
nmap gx <Plug>(openbrowser-open)
"""
on_map = { n = "<Plug>(openbrowser" }

[[plugins]]
repo = "ap/vim-css-color"
on_ft = ["css", "scss", "vue"]

[[plugins]]
repo = "pechorin/any-jump.vim"
hook_add = """
let g:any_jump_disable_default_keybindings = v:true
"""
on_cmd = ["AnyJump", "AnyJumpVisual", "AnyJumpBack", "AnyJumpLastResults"]

[[plugins]]
repo = "y0za/vim-reading-vimrc"
on_cmd = ["ReadingVimrcNext", "ReadingVimrcList", "ReadingVimrcLoad", "ReadingVimrcCopy"]
hook_source = """
function! s:reading_copy(line1, line2) abort
  let l:file = expand('%:t')
  if a:line1 == a:line2
    let l:line = printf('L%d', a:line1)
  else
    let l:line = printf('L%d+%d', a:line1, a:line2 - a:line1)
  endif
  call setreg(v:register, input('', printf('%s#%s ', l:file, l:line)))
endfunction

command! -range ReadingVimrcCopy call <SID>reading_copy(<line1>, <line2>)
"""

[[plugins]]
repo = "lambdalisue/suda.vim"
hook_add = """
let g:suda_smart_edit = v:true
"""
on_event = "BufRead"

[[plugins]]
repo = "Shougo/context_filetype.vim"
lua_source = """
local vimx = require("artemis")
vimx.g["context_filetype#ignore_patterns"] = {
  toml = [[^\s*#\s*]],
}
"""

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
if = "has('nvim')"
on_event = ["BufRead", "BufNewFile"]
hook_post_update = "TSUpdate"
hooks_file = "$DEIN_RC_DIR/hooks/treesitter.lua"

[[plugins]]
repo = "nvim-treesitter/playground"
on_source = "nvim-treesitter"

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter-textobjects"
on_source = "nvim-treesitter"
# Use upper case for treesitter, it prevent to confuse at Vim's one.

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter-context"
# TODO: i wait to show context on top-right position
# TODO: show context like A>B>C
on_source = "nvim-treesitter"
lua_source = """
require("treesitter-context").setup({
  enable = true,
  max_lines = 0,
  trim_scope = "outer",
  patterns = {
    default = {
      "class",
      "function",
      "method",
    },
  },
  exact_patterns = {
  },
  zindex = 20,
  mode = "cursor",
})
"""

[[plugins]]
repo = "nvim-treesitter/nvim-tree-docs"
# repo = "~/workspace/nvim-tree-docs"
on_source = "nvim-treesitter"

[[plugins]]
repo = "yuki-yano/vim-operator-replace"
depends = "vim-operator-user"
on_map = { n = "<Plug>", x = "<Plug>" }
hook_add = """
nmap R <Plug>(operator-replace)
xmap R <Plug>(operator-replace)
"""

[[plugins]]
repo = "mattn/vim-treesitter"
build = "cd server && go build"
if = "!has('nvim')"

# [[plugins]]
# repo = "christoomey/vim-tmux-navigator"
# hook_add = """
# let g:tmux_navigator_no_mappings = v:true
# " nnoremap
# nnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
# nnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
# nnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
# nnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
# " xnoremap
# xnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
# xnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
# xnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
# xnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
# " lnoremap
# lnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
# lnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
# lnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
# lnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
# " tnoremap
# tnoremap <silent> <M-h> <Cmd>TmuxNavigateLeft<CR>
# tnoremap <silent> <M-j> <Cmd>TmuxNavigateDown<CR>
# tnoremap <silent> <M-k> <Cmd>TmuxNavigateUp<CR>
# tnoremap <silent> <M-l> <Cmd>TmuxNavigateRight<CR>
# """
# on_cmd = [
#     "TmuxNavigateLeft",
#     "TmuxNavigateDown",
#     "TmuxNavigateUp",
#     "TmuxNavigateRight",
# ]
# if = "has('wsl')"

[[plugins]]
repo = "machakann/vim-vimhelplint"
on_cmd = ["VimhelpLint"]
[plugins.ftplugin]
help = """
nnoremap <silent><buffer><Space>d <Cmd>VimhelpLint!<CR>
"""

[[plugins]]
repo = "mattn/vim-sonictemplate"
on_cmd = ["Template"]
hook_add = """
let g:sonictemplate_vim_template_dir = g:config_dir .. '/templates'
let g:sonictemplate_key = ''
let g:sonictemplate_intelligent_key = ''
let g:sonictemplate_postfix_key = ''
nnoremap <Plug>(fzf-p-prefix)<C-t> <Cmd>call fzf#sonictemplate#run()<CR>
nnoremap <Plug>(fzf-p-prefix)t <Cmd>call fzf#sonictemplate#run()<CR>
"""

[[plugins]]
repo = "pappasam/vim-filetype-formatter"
lua_add = """
local vimx = require('artemis')
vimx.g.vim_filetype_formatter_commands = {
  ruby = 'rufo -x',
  json = 'jq .',
  go = 'goimports | gofmt',
  typescript = 'NO_COLOR= deno fmt -',
  sh = 'shfmt -ln bash -i 2 -bn -ci -sr -kp',
  fortran = 'fprettify -i 2 -S',
  elm = 'elm-format --stdin',
  dockerfile = 'dockfmt fmt',
}

vimx.g.vim_filetype_formatter_ft_maps = {
  bash = 'sh',
}
"""
on_cmd = "FiletypeFormat"
[plugins.ftplugin]
ruby = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
json = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
python = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
go = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
sh = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
bash = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
fortran = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
elm = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"
# typescript = """
# if !myvimrc#is_node_project#check()
#   nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>
# endif
# """
dockerfile = "nnoremap <buffer><Space>f <Cmd>FiletypeFormat<CR>"

[[plugins]]
repo = "voldikss/vim-floaterm"
hook_add = """
command! Lazygit FloatermNew --autoclose=2 --autohide=0 --opener=tabe --height=1.0 --width=1.0 --title=lazygit lazygit
command! Ranger FloatermNew --autoclose=2 --autohide=0 --opener=tabe --height=1.0 --width=1.0 --title=ranger ranger
command! CreatePR FloatermNew --autoclose=2 --autohide=0 --opener=tabe --height=0.7 --width=0.7 --title=PR gh pr create
command! CreateIssue FloatermNew --autoclose=2 --autohide=0 --opener=tabe --height=0.7 --width=0.7 --title=Issue gh issue create
command! Fkill FloatermKill
cnoreabbrev pr CreatePR
cnoreabbrev issue CreateIssue
nnoremap <C-g> <Cmd>Lazygit<CR>
nnoremap <Space>t <Cmd>FloatermNew<CR>
"""
on_cmd = ["FloatermNew"]
[plugins.ftplugin]
floaterm = "tnoremap <buffer> <ESC> <ESC>"

[[plugins]]
repo = "vim-jp/vital.vim"
on_cmd = ["Vitalize"]

[[plugins]]
repo = "thinca/vim-partedit"
hook_add = """
let g:partedit#opener = 'vsplit'
"""
on_func = ["partedit#start"]

[[plugins]]
repo = "Omochice/vim-operator-partedit"
depends = ["vim-operator-user", "vim-partedit"]
hook_add = """
nmap qe <Plug>(operator-partedit-start)
xmap qe <Plug>(operator-partedit-start)
"""
on_map = { x = "<Plug>", n = "<Plug>" }
[plugins.ftplugin]
markdown = """
nmap <buffer> qe <Plug>(operator-partedit-codeblock)
xmap <buffer> qe <Plug>(operator-partedit-codeblock)
"""

[[plugins]]
repo = "lambdalisue/fern.vim"
hooks_file = "$DEIN_RC_DIR/hooks/fern.vim"

[[plugins]]
repo = "lambdalisue/fern-hijack.vim"
on_source = "fern.vim"

[[plugins]]
repo = "lambdalisue/fern-renderer-nerdfont.vim"
hook_add = """
let g:fern#renderer = "nerdfont"
let g:fern#renderer#nerdfont#indent_markers = 1
"""
on_source = "fern.vim"

[[plugins]]
repo = "mattn/emmet-vim"
hook_add = """
let g:user_emmet_install_global = v:false
function s:expand() abort
  call emmet#util#closePopup()
  call emmet#expandAbbr(0, '')
  " NOTE: after expand. cursor position is: `div` => `<div|></div>`
  silent! normal! 1l
endfunction
inoremap <Plug>(emmet-expand-abbr-with-cmd) <Cmd>call <SID>expand()<CR>
"""
on_map = { i = "<Plug>" }

[[plugins]]
# repo = "~/Toy/toy-postfix.vim"
repo = "Omochice/toy-postfix.vim"
lua_add = """
local vimx = require("artemis")
vimx.g["toy_postfix#rule_dir"] = vimx.g.config_dir .. "/postfix"
vimx.g["toy_postfix#extends"] = {
  typescript = "javascript",
  vue = { "typescript", "javascript" },
}
"""
on_func = ["toy_postfix#expandable", "toy_postfix#expand"]

[[multiple_plugins]]
plugins = ["vim-vsnip", "emmet-vim", "toy-postfix.vim"]
hook_add = """
function! s:expand_snippets() abort
  silent! doautocmd <nomodeline> User myvimrc#close_pum
  if toy_postfix#expandable()
    return "\<Cmd>call toy_postfix#expand()\<CR>"
  elseif vsnip#expandable()
    return "\<Plug>(vsnip-expand)"
  else
    return "\<Plug>(emmet-expand-abbr-with-cmd)"
  endif
endfunction
inoremap <expr><C-j> "\<C-g>u" .. <SID>expand_snippets()
"""

[[plugins]]
repo = "Omochice/yank-remote-url.vim"
# repo = "~/Toy/yank-remote-url.vim"
hook_add = """
let g:yank_remote_url#enable_cache = v:true
let g:yank_remote_url#use_direct_hash = v:true
let g:yank_remote_url#remote_name = 'origin'
let g:yank_remote_url#_debug = v:false
nnoremap <Space>gy <Cmd>YankRemoteURL<CR>
"""
on_cmd = "YankRemoteURL"

[[plugins]]
repo = "tweekmonster/helpful.vim"
on_cmd = "HelpfulVersion"

[[plugins]]
repo = "rhysd/git-messenger.vim"
lua_add = """
local vimx = require('artemis')
vimx.g.git_messenger_no_default_mappings = false
vimx.g.git_messenger_floating_win_opts = { border = 'single' }
vimx.keymap.set('n', '<Space>gm', '<Plug>(git-messenger)')
"""
on_map = { n = "<Plug>" }

[[plugins]]
repo = "tyru/capture.vim"
hook_add = """
cnoremap <expr><C-c> empty(trim(getcmdline())) ? "<C-c>" : "<Home>Capture<Space><CR>"
"""
on_cmd = "Capture"
[plugins.ftplugin]
capture = """
setlocal wrap
"""

[[plugins]]
repo = "lewis6991/gitsigns.nvim"
lua_source = """
require('gitsigns').setup()
"""
if = "has('nvim')"
on_event = ["BufRead", "BufNewFile"]

[[plugins]]
repo = "thinca/vim-qfreplace"
on_cmd = "Qfreplace"

[[plugins]]
repo = "rcarriga/nvim-notify"
hooks_file = "$DEIN_RC_DIR/hooks/nvim-notify.lua"
if = "has('nvim')"

[[plugins]]
repo = "MunifTanjim/nui.nvim"
if = "has('nvim')"

[[plugins]]
repo = "folke/noice.nvim"
hooks_file = "$DEIN_RC_DIR/hooks/noice.lua"
depends = ["nui.nvim", "nvim-notify"]
if = "has('nvim')"
on_event = [
  "BufRead",
  "BufNewFile",
  "InsertEnter",
  "CmdlineEnter",
]
on_lua = "notify"

[[plugins]]
repo = "uga-rosa/ccc.nvim"
hooks_file = "$DEIN_RC_DIR/hooks/ccc.lua"
on_event = ["BufRead", "BufNewFile"]
if = "has('nvim')"
