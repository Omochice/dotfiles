[[plugins]]
repo = "vim-denops/denops.vim"
hook_add = """
command! DenopsRestart call denops#server#restart() " NOTE: not work?
"""
on_event = "CursorHold"

# [[plugins]]
# repo = "Omochice/dps-popup-test"
# # repo = "~/workspace/dps-popup-test"
# on_source = "denops.vim"
#
[[plugins]]
repo = "Omochice/dps-paiza-io-vim"
# repo = "~/workspace/dps-paiza-io-vim"
on_cmd = "PaizaIO"

# [[plugins]]
# repo = "Omochice/dps-charcounter-vim"
# # repo = "~/workspace/dps-charcounter-vim"
# on_cmd = "CharCount"

[[plugins]]
repo = "Omochice/dps-codic-vim"
# repo = "~/workspace/dps-codic-vim"
on_cmd = "Codic"

# [[plugins]]
# repo = "yuki-yano/dps-slack-status.vim"
# hook_add = """
# let g:slack_status_emoji = ":dadparrot:"
# """
# on_source = "denops.vim"

# # guise.vim not work well on lazy...?
# [[plugins]]
# repo = "lambdalisue/guise.vim"
# on_event = "TermOpen"
# depends = "denops.vim"
# # # on_source = "denops.vim"

# # [[plugins]]
# # repo = "supporterz-vol5-1/breakTimer-vim"
# # hook_add = """
# # let g:break_timer_username = "Omochice"
# # """
# # depends = ["denops.vim"]
# # on_event = "BufRead"
#
[[plugins]]
repo = "gamoutatsumi/dps-ghosttext.vim"
hook_add = """
" redmine.~~.~~ とかだとうまくいかないので要調査
let g:dps_ghosttext#ftmap = {
\   'biz.quest.signate.jp': 'python',
\   'play.golang.org': 'go',
\   'cloudlatex.io': 'tex',
\   'redmine': 'markdown',
\ }

command! GhostTextStart tabedit | GhostStart
"""
depends = "denops.vim"
on_cmd = "GhostStart"

[[plugins]]
repo = "lambdalisue/gin.vim"
depends = "denops.vim"
hook_add = """
cnoreabbrev gin Gin
cnoreabbrev gins GinStatus ++opener=tabnew
cnoreabbrev ginb GinBranch
"""
on_cmd = ["Gin", "GinStatus"]
[plugins.ftplugin]
gin-status = """
nnoremap <buffer><nowait> q <Cmd>bprevious<CR>
nnoremap <buffer> cc <Cmd>Gin commit<CR>
function! s:open_diff() abort
  if line('.') ==# 1
    return
  endif

  let l:line = getline('.')
  if l:line->len() <= 3 || l:line[3:] =~# '^\s\+\$'
    return
  endif
  let l:filename = l:line[3:]

  let diff_winids = tabpagebuflist()
        \ ->map( { -> bufwinnr(v:val) } )
        \ ->filter( { -> getwinvar(v:val, '&filetype') ==# 'gin-diff'} )
  if diff_winids->len() ==# 0
    let l:current_winid = win_getid()
    execute 'GinDiff' '++opener=botright\ vsplit' '--' l:filename
    call win_gotoid(l:current_winid)
    return
  endif

  " FIXME: if wins is over than 2?
  call win_execute(win_getid(diff_winids[0]), 'GinDiff -- ' .. l:filename)
endfunction

nnoremap <buffer><nowait> d <Cmd>call <SID>open_diff()<CR>
"""
gin-branch = """
nnoremap <buffer> i <Plug>(gin-action-new)
"""

[[plugins]]
# repo = "Omochice/tataku.vim"
repo = "~/Toy/tataku.vim"
hook_add = """
function! s:reset() abort
  let g:tataku_recipes = #{
        \ translate_en_to_ja: #{
        \   collector: #{name: 'current_line', options: {}},
        \   processor: [
        \     #{name: 'intl_segmenter', options: #{locale: 'en'}},
        \     #{name: 'google_translate', options: #{source: "en", target: 'ja'}},
        \     #{name: 'intl_segmenter', options: #{locale: 'ja'}},
        \     #{name: 'split_by_displaywidth', options: #{width: &columns - 2, float: "left", is_wrap: v:true }},
        \   ],
        \   emitter: #{name: 'nvim_floatwin', options: #{border: 'single'}}
        \ },
        \ translate_ja_to_en: #{
        \   collector: #{name: 'current_line', options: {}},
        \   processor: [
        \     #{name: 'intl_segmenter', options: #{locale: 'ja'}},
        \     #{name: 'google_translate', options: #{source: "ja", target: 'en'}},
        \     #{name: 'intl_segmenter', options: #{locale: 'en'}},
        \     #{name: 'split_by_displaywidth', options: #{width: &columns - 2, float: "left", is_wrap: v:true }},
        \   ],
        \   emitter: #{name: 'nvim_floatwin', options: #{border: 'single'}}
        \ },
        \ }
endfunction

call s:reset()
augroup tataku-setting
  autocmd!
  autocmd VimResized * call <SID>reset()
augroup END

let g:tataku_enable_operator = v:true
nmap tr <Plug>(operator-tataku-translate_en_to_ja)
xmap tr <Plug>(operator-tataku-translate_en_to_ja)
nmap tR <Plug>(operator-tataku-translate_ja_to_en)
xmap tR <Plug>(operator-tataku-translate_ja_to_en)
nmap trr <Cmd>call tataku#call_recipe('translate_en_to_ja')<CR>
nmap tRR <Cmd>call tataku#call_recipe('translate_ja_to_en')<CR>
"""
depends = ["denops.vim", "vim-operator-user"]
on_func = "tataku#call_recipe"
on_map = { n = "<Plug>(operator-tataku", x = "<Plug>(operator-tataku" }

[[plugins]]
repo = "~/Toy/tataku-collector-current_line"
# repo = "Omochice/tataku-collector-current_line"
on_source = "tataku.vim"

[[plugins]]
repo = "~/Toy/tataku-processor-google_translate"
# repo = "Omochice/tataku-processor-google_translate"
on_source = "tataku.vim"

[[plugins]]
# repo = "Omochice/tataku-processor-intl_segmenter"
repo = "~/Toy/tataku-processor-intl_segmenter"
on_source = "tataku.vim"

[[plugins]]
# repo = "Omochice/tataku-emitter-nvim_floatwin"
repo = "~/Toy/tataku-emitter-nvim_floatwin"
on_source = "tataku.vim"

[[plugins]]
repo = "Omochice/tataku-processor-split_by_displaywidth"
on_source = "tataku.vim"

[[plugins]]
repo = "4513ECHO/denops-gitter.vim"
hook_add = """
let g:gitter#token = $GITTER_TOKEN
command! ReadingVimrcGitter tabnew gitter://room/vim-jp/reading-vimrc
"""
depends = ["denops.vim"]
on_path = "gitter://*"
