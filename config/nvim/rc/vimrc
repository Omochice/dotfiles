let s:rc_dir = fnamemodify(expand('<sfile>'), ':p:h')
let g:config_dir = fnamemodify(s:rc_dir, ':h')

" dein installation check {{{
let $CACHE = expand('~/.cache')
if !isdirectory($CACHE)
  call mkdir($CACHE, 'p')
endif

let s:dein_dir = $CACHE .. '/dein'

if &runtimepath !~# '/dein.vim'
  let s:dein_repo_dir = s:dein_dir .. '/repos/github.com/Shougo/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' .. s:dein_repo_dir
endif
" }}}

" options {{{
let g:dein#auto_recache = !has('win32')
let g:dein#lazy_rplugins = v:true
" }}}

" begin settings {{{
if dein#min#load_state(s:dein_dir)
  let g:dein#inline_vimrcs = [
       \ expand('~/.config/vim/vimrc.core'),
       \ ]

  " .toml file

  let s:toml = s:rc_dir .. '/dein.toml'
  let s:lazy_toml = s:rc_dir .. '/dein_lazy.toml'
  let s:denops_toml = s:rc_dir .. '/dein_denops.toml'
  let s:ddc = s:rc_dir .. '/ddc.toml'
  let s:ddu = s:rc_dir .. '/ddu.toml'
  let s:ft_toml = s:rc_dir .. '/deinft.toml'

  call dein#begin(s:dein_dir, expand('<sfile>'))
  " read toml and cache
  call dein#load_toml(s:toml, #{lazy: v:false})
  call dein#load_toml(s:lazy_toml, #{lazy: v:true})
  call dein#load_toml(s:denops_toml, #{lazy: v:true})
  call dein#load_toml(s:ddc, #{lazy: v:true})
  call dein#load_toml(s:ddu, #{lazy: v:true})
  call dein#load_toml(s:ft_toml, #{lazy: v:false})
  " end settings
  call dein#end()
  call dein#save_state()
endif
" }}}

" plugin installation check {{{
if dein#check_install()
  if $DEIN_GITHUB_TOKEN !=# ''
    let g:dein#install_github_api_token = $DEIN_GITHUB_TOKEN
    call dein#check_update(v:true)
  else
    call dein#install()
  endif
endif
" }}}

" plugin remove check {{{
let s:removed_plugins = dein#check_clean()
if !(s:removed_plugins->empty())
  call map(s:removed_plugins, {_, val -> delete(val, 'rf')})
  call dein#recache_runtimepath()
endif
" }}}

if has('wsl')
  call myvimrc#zenhan#enable()
elseif !has('mac')
  call myvimrc#fcitx#enable()
endif
