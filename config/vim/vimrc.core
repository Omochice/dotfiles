" user settings
syntax on
filetype plugin indent on
set autoindent
set autoread
set completeopt=menuone,noselect,preview
set expandtab
set hlsearch
set ignorecase
set incsearch
set infercase
set laststatus=2
set nobackup
set noswapfile
set noshowcmd " Use screenkey to show them
set nowrap
set nowritebackup
set nonumber
set shiftwidth=4
set signcolumn=yes
set showmatch
set smartindent
set softtabstop=4
set tabstop=4
set virtualedit=onemore
set wildmenu

if has('nvim')
  set wildmode=full
  set wildoptions+=pum
else
  set wildmode=longest,full
  if has('patch-8.2.4325')
    set wildoptions+=pum
  endif
endif

if has('termguicolors')
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  " TODO
  " If disable below. any background will be transparency. :(
  " include lightline, popup menu.
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR = v:true
else
  set iminsert=2
  let &t_ti ..= "\e[1 q"
  let &t_SI ..= "\e[5 q"
  let &t_SR ..= "\e[3 q"
  let &t_EI ..= "\e[1 q"
  let &t_te ..= "\e[0 q"
endif

if has('win32') || has('mac')
  set clipboard=unnamed
else
  set clipboard=unnamed,unnamedplus
endif

" move cursor wigh hjkl in insert mode
inoremap <C-h> <Left>
" inoremap <C-j> <Down>
" inoremap <C-k> <Up>
inoremap <C-l> <Right>

" inoremap <expr> <C-j> pumvisible() ? '<C-n>' : '<Down>'
" inoremap <expr> <C-k> pumvisible() ? '<C-p>' : '<Up>'

" move UP/DOWN at fold context as same as displayed
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

nnoremap Q <Cmd>copen<CR>

" easy force write/quit
cnoreabbrev qq quit!
cnoreabbrev QQ qall!
cnoreabbrev ww update!
cnoreabbrev w update

" TODO
" cnoreabbrev w:q wq

" dont use clipboard
nnoremap x "_x
nnoremap s "_s
nnoremap c "_c

" indent in insert mode
inoremap <Left> <C-d>
inoremap <Right> <C-t>
" inoremap <Up> <nop>
" inoremap <Down> <nop>

nnoremap J gj
xnoremap J gj
xnoremap K gk

"" move visual block in visual mode
" vnoremap <silent> <C-K> "zx<Up>"zP`[V`]
" vnoremap <silent> <C-J> "zx"zp`[V`]

" " tmux win move
" nnoremap <C-q> h :<C-u>wincmd h<CR>
" nnoremap <C-q> j :<C-u>wincmd j<CR>
" nnoremap <C-q> k :<C-u>wincmd k<CR>
" nnoremap <C-q> l :<C-u>wincmd l<CR>

" from other resource, vim.jp etc..
nnoremap <silent> <ESC><ESC> <Cmd>nohlsearch<CR>
nnoremap <expr> 0 getline('.')[0 : col('.') - 2] =~# '^\s\+$' ? '0' : '^'
nnoremap Y y$
nnoremap <C-s> :<C-u>%s@\v@@g<Left><Left><Left>
vnoremap <C-s> :<C-u>'<,'>s@\v@@g<Left><Left><Left>

cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-a> <Home>
inoremap <expr> <C-a> getline('.')[0 : col('.') - 2] =~# '^\s\+$' ? '<C-o>0' : '<C-o>^'
noremap!        <C-e> <End>

" nnoremap + <C-a>
" nnoremap - <C-x>

" Automatically indent with i and A
nnoremap <expr> i len(getline('.')) ? 'i' : '"_cc'
nnoremap <expr> A len(getline('.')) ? 'A' : '"_cc'

augroup vimrc#terminal
  autocmd!
augroup END


if has('nvim')
  " neovim terminal settings
  " tnoremap <C-w><C-w> <C-\><C-n><C-w><C-w>
  tnoremap <ESC> <C-\><C-n>
  " feed insert mode when move terminal window
  autocmd vimrc#terminal TermOpen * startinsert
  autocmd vimrc#terminal TermOpen * setlocal nonumber "FIXME not work
  autocmd vimrc#terminal WinEnter * if &buftype ==# 'terminal' | startinsert | endif
  " auto close
  autocmd vimrc#terminal TermClose * call feedkeys('\<CR>')
  " helper commands
  command! Vterm vertical botright vnew term://${SHELL}
  command! Hterm botright new term://${SHELL}
  command! Tterm tabnew term://${SHELL}
else
  " Vim terminal settings
  tnoremap <ESC> <C-w>N
  autocmd vimrc#terminal TerminalOpen * setlocal nonumber
  " helper commands
  command! Vterm vertical botright vnew | terminal ++curwin
  command! Hterm botright new | terminal ++curwin
  command! Tterm tabnew | terminal ++curwin
endif

noremap  <M--> <Cmd>Hterm<CR>
noremap! <M--> <Cmd>Hterm<CR>
tnoremap <M--> <Cmd>Hterm<CR>

noremap  <M-\> <Cmd>Vterm<CR>
noremap! <M-\> <Cmd>Vterm<CR>
tnoremap <M-\> <Cmd>Vterm<CR>

if has('gui_running')
  set guifont=Firge35\ Console\ 18
  set guioptions-=r
  set guioptions-=R
  set guioptions-=l
  set guioptions-=L
  set guioptions-=b
  set guioptions-=m
  set guioptions-=T
else
  set t_Co=256
  augroup term_vim_c_space
    autocmd!
    autocmd VimEnter * map <Nul> <C-Space>
    autocmd VimEnter * map! <Nul> <C-Space>
  augroup END
endif

" use ripgrep
if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

function! s:grep_in_file() abort
  let l:query = input('grep: ')
  if empty(l:query)
    echohl WarningText
    echomsg 'vimgrep is canceled'
    echohl None
    return
  endif
  try
    silent execute 'lvimgrep ' . l:query . ' % | lw'
    " conceal has bug about wrapping
    setlocal conceallevel=3 concealcursor=nvc nowrap
    syntax match grep_internal '^.\{-}|\@=' conceal
  catch /.*/
    " if quickfix open already, close it.
    silent execute 'lclose'
    echoerr v:exception
  endtry
endfunction

nnoremap F <Cmd>call <SID>grep_in_file()<CR>

" copy buffer command
command! CopyBuffer %y

" Disable message that show when start without args (I)
set shortmess=asTIcF

" filetype settings
if has('nvim') " not work if v:true/false
  let g:did_load_filetypes = 0
  let g:do_filetype = 1
endif

let g:filetype_m = 'mma'

" 読み込み順の問題か/ftdetect/objcだとうまくいかない
augroup myFiletypeDetect
  autocmd!
  autocmd BufRead,BufNewFile *.m set filetype=objc
augroup END
