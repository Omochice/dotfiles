#
# bashrc all in one
# 
#
#
# How to use ?
#   1) install `peco` `xsel` `tree` ( via apt etc)
#   2) install `exa` `batcat` (  )
#       -- exa --
#       curl https://sh.rustup.rs -sSf | sh
#       wget -c -P ~/ https://github.com/ogham/exa/releases/download/v0.9.0/exa-linux-x86_64-0.9.0.zip
#       unzip ~/exa-linux-x86_64-0.9.0.zip -d ~
#       rm ~/exa-linux-x86_64-0.9.0.zip
#       sudo mv ~/exa-linux-x86_64 /bin/exa
#
#       -- bat --
#       wget -c -P ~/ "https://github.com/sharkdp/bat/releases/download/v0.12.1/bat_0.12.1_amd64.deb" >/dev/null
#       sudo apt -y install ~/bat_0.12.1_amd64.deb >/dev/null
#       rm ~/bat_0.12.1_amd64.deb       
#   3) (link this file to ~/.bashrc) or (save this file as ~/.bashrc)
#       rm ~/.bashrc
#       ln -snf <Absolute path to this file> ~/.bashrc
#   4) reload bash
#       exec $SHELL -l

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# aliases 

alias shutdown='sudo shutdown -h now'
alias tree='tree -C'

alias pbcopy="xsel --clipboard --input"
alias pbpaste="xsel --clipboard --output"

alias tmux="tmux -u2"

alias ll="ls -al"
alias la="ls -a"

if type "bat" >/dev/null 2>&1; then
    alias cat="bat"
elif type "batcat" >/dev/null 2>&1; then
    alias cat="batcat"
fi

if type "exa" >/dev/null 2>&1; then
    alias ls="exa -g --time-style=long-iso"
fi


# functions 

# # ex - archive extractor
# # usage: ex <file>
function ex() {
    if [ -f $1 ]; then
        case $1 in
        *.tar.bz2) tar xjf $1 ;;
        *.tar.gz) tar xzf $1 ;;
        *.bz2) bunzip2 $1 ;;
        *.rar) unrar x $1 ;;
        *.gz) gunzip $1 ;;
        *.tar) tar xf $1 ;;
        *.tbz2) tar xjf $1 ;;
        *.tgz) tar xzf $1 ;;
        *.zip) unzip $1 ;;
        *.Z) uncompress $1 ;;
        *.7z) 7z x $1 ;;
        *) echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function cdls() {
    if [ "$OLDPWD" != "$PWD" ]; then
        ls
        OLDPWD="$PWD"
    fi
}
PROMPT_COMMAND="$PROMPT_COMMAND"$'\n'cdls

# pecoの設定
export HISTCONTROL=erasedups
peco-select-history() {
    declare l=$(HISTTIMEFORMAT= history | sed -e 's/^\s*[0-9]\+\s\+//' | peco --query "$READLINE_LINE")
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
}
bind -x '"\C-r": peco-select-history'

# prompt

function _color() {
    case $1 in
    black) echo -e -n "\001\e[30m\002" ;;
    red) echo -e -n "\001\e[31m\002" ;;
    green) echo -e -n "\001\e[32m\002" ;;
    yellow) echo -e -n "\001\e[33m\002" ;;
    blue) echo -e -n "\001\e[34m\002" ;;
    magenta) echo -e -n "\001\e[35m\002" ;;
    cyan) echo -e -n "\001\e[36m\002" ;;
    white) echo -e -n "\001\e[37m\002" ;;
    *) echo -e -n "\001\e[0m\002" ;;
    esac
    # \[\]の代わりに\001 \002を使うことで\[\]がないときに発生する履歴が残る不具合を解消する
    # arch wiki (bash/プロンプトのカスタマイズ)参照
}

function git_branch() {
    local s=$(git branch --no-color 2>/dev/null | sed -ne "s/^\* \(.*\)$/\1/p")
    # 未commitとかは以下で定義する
    # TODO define logo for commit, unstarging etc.
    if [ ! "$s" = "" ]; then
        echo "$(_color normal)($(_color yellow)$s$(_color normal))"
    fi
}

function abbr_pwd() {
    local p=$(echo $(pwd) | sed "s@$HOME@~@")
    local directories=(${p//\// })
    local _n_d=${#directories[@]}
    local _last=${directories[_n_d - 1]}
    local _abbr_pwd=""
    if [ ${directories[0]} != "~" ]; then
        _abbr_pwd=$_abbr_pwd/
    fi
    # 本当はif [[ $p =~ (.?[^\/]{1})[^\/]*\/ ]]で処理したい
    for d in "${directories[@]:0:_n_d-1}"; do
        _abbr_pwd=$_abbr_pwd${d:0:1}/
    done
    echo $_abbr_pwd$_last
}

# line 1
# # user at pc in dirname (git) <space> [HH:MM]
function _line_1() {
    local _ps1_1="$(_color yellow)$USER$(_color normal) at $(_color magenta)$HOSTNAME$(_color normal) in $(_color green)$(abbr_pwd) $(git_branch)"
    echo $_ps1_1
}

# line 2
# (venv) ↪ $|#
function _line_2() { # TODO show venv info
    local _ps1_2=$(_color normal)

    if [[ $1 != 0 ]]; then
        _ps1_2="$_ps1_2$(_color red)"
    fi

    echo "${_ps1_2} ↪"
}

function _ps1() {
    local latest_status=$?
    echo "$(_line_1)"
    echo "$(_line_2 $latest_status) \$$(_color normal) "
    # \nでつなげるとsingle quoteで解釈されないみたい
}

PS1="\$(_ps1)"
export PS1

function __command_rprompt() {
    echo # 前のコマンドから一行空白行を入れる
    local rprompt=$(date "+[ %H:%M ]")
    local w_prompt=$(($COLUMNS - ${#rprompt}))
    printf "%${w_prompt}s$rprompt\\r"
}

PROMPT_COMMAND="$PROMPT_COMMAND"$'\n'__command_rprompt

# shopts

shopt -s autocd
shopt -s cdspell
shopt -s dirspell
shopt -s globstar
shopt -s nocaseglob
shopt -s checkwinsize
shopt -s histappend
shopt -s expand_aliases
